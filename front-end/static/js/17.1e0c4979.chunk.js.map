{"version":3,"sources":["assets/icons/inactivo.svg","vistas/proyectos/graficas_proyectos/ProyectosBasica.js","vistas/proyectos/graficas_proyectos/ProyectosLandmark.js","vistas/proyectos/graficas_proyectos/ProyectosPeligrosidad.js","vistas/proyectos/graficas_proyectos/ProyectosBasicas.js","vistas/proyectos/graficas_proyectos/ProyectosLandmarks.js","vistas/proyectos/graficas_proyectos/ProyectosPeligrosidades.js","vistas/proyectos/graficas_proyectos/ProyectosGraficas.js","vistas/proyectos/graficas_proyectos/ProyectosCustom.js","vistas/proyectos/graficas_proyectos/ProyectosLayout.js"],"names":["data","labels","values","arr_colors","etiquetas","hour","arr_values","length","forEach","label","push","slice","v","idx","alias","fill","backgroundColor","borderColor","datasets","options","scales","y","grace","plugins","zoom","pan","enabled","mode","wheel","pinch","onZoomComplete","chart","update","maintainAspectRatio","ProyectosBasica","sensores","chartRef","useRef","graficasDatos","store","getState","arr_clean","datos","map","useState","setLabels","accordion","setAccordion","setValues","ultimoDato","oldData","newData","corto","useEffect","Chart","register","arr_dates","matrix_val","sensor","fecha","arr","i","valor","inicializar","old","className","style","minHeight","maxHeight","ref","onClick","current","resetZoom","id","block","tipo","nombre","show","undefined","toFixed","ProyectosLandmark","landmark","nivel","deltai","deltay","ProyectosPeligrosidad","peligrosidad","ProyectosBasicas","idProyecto","graficasProyectosBasicas","setGraficasProyectosBasicas","cargando","setCargando","intervalo","token","localStorage","getItem","tarjeta","getData","a","Promise","all","getProyectoById","getRecursosAPI","graficas_proyecto","graficas","sensores_proyecto","variables_proyecto","variables","lista_sensores","str_sensores","str_variables","variable","index","direccion","getPaquetesAPI","getProyectosPaquetesApi","sensores_datos","variables_datos","reverse","arr_graficas","grafica","arr_grafica","arr_variables","arr_sensores","direcciones","variable_index","find","parseInt","substring","estado","direccion_proyecto","direccion_sensor","sensor_index","indexOf","sensor_info","clearInterval","setInterval","display","placeItems","height","Loader","sm","md","ProyectosLandmarks","graficasProyectosLandmarks","setGraficasProyectosLandmarks","getLandmarksAPI","direccionproyecto","ProyectosPeligrosidades","graficasProyectosPeli","setGraficasProyectosPeli","getPeligrosidadAPI","ProyectosGraficas","graficaActiva","custom","setCustom","xs","name","value","onChange","e","target","valores","ProyectosCustom","graficasProyectosCustom","setGraficasProyectosCustom","getValor","sensores_landmark","sensores_peligrosidad","ProyectosLayout","match","params","descripcion","icono","iconoinactivo","informacion","setInformacion","iconoactivo","estadoformato","toUpperCase","fluid","src","accent","activeTab","variant"],"mappings":"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","file":"static/js/17.1e0c4979.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/inactivo.c25580cd.svg\";","import React, { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCollapse,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n} from \"@coreui/react\";\r\nimport { Chart, Line } from \"react-chartjs-2\";\r\nimport \"./ProyectosGraficas.css\";\r\nimport zoom from \"chartjs-plugin-zoom\";\r\nimport store from \"src/store\";\r\n\r\nconst data = (labels, values, arr_colors, etiquetas) => {\r\n  let hour = [];\r\n  let arr_values = [];\r\n  if (labels.length > 1) {\r\n    labels.forEach((label) => {\r\n      hour.push(label.slice(11, label.length));\r\n    });\r\n  }\r\n  values.forEach((v, idx) => {\r\n    arr_values.push({\r\n      label: `${etiquetas[idx].alias}`,\r\n      data: v,\r\n      fill: false,\r\n      backgroundColor: `rgb(${arr_colors[idx]})`,\r\n      borderColor: `rgb(${arr_colors[idx]}, 0.2)`,\r\n    });\r\n  });\r\n\r\n  return {\r\n    labels: hour,\r\n    datasets: arr_values,\r\n  };\r\n};\r\n\r\nconst options = {\r\n  scales: {\r\n    y: {\r\n      grace: \"0.25%\",\r\n    },\r\n  },\r\n  plugins: {\r\n    zoom: {\r\n      pan: {\r\n        enabled: true,\r\n        mode: \"xy\",\r\n      },\r\n      zoom: {\r\n        wheel: {\r\n          enabled: true,\r\n        },\r\n        pinch: {\r\n          enabled: true,\r\n        },\r\n        mode: \"xy\",\r\n        onZoomComplete({ chart }) {\r\n          chart.update(\"none\");\r\n        },\r\n      },\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n};\r\n\r\nconst arr_colors = [\"81,205,160\", \"109,120,173\", \"224,125,117\"];\r\n\r\nconst ProyectosBasica = ({ sensores }) => {\r\n  const chartRef = useRef(null);\r\n  const { graficasDatos } = store.getState();\r\n  const arr_clean = sensores[0].datos.map(() => {\r\n    return [];\r\n  });\r\n  const [labels, setLabels] = useState([]);\r\n  const [accordion, setAccordion] = useState();\r\n  const [values, setValues] = useState(arr_clean);\r\n\r\n  const ultimoDato = (oldData, newData) => {\r\n    if (oldData.length < graficasDatos.corto) {\r\n      return [...oldData, newData];\r\n    } else {\r\n      return [\r\n        ...oldData.slice(\r\n          oldData.length - (graficasDatos.corto - 1),\r\n          oldData.length\r\n        ),\r\n        newData,\r\n      ];\r\n    }\r\n  };\r\n\r\n  const inicializar = () => {\r\n    let arr_dates = [];\r\n    let matrix_val = [...arr_clean];\r\n    sensores.forEach((sensor) => {\r\n      arr_dates.push(sensor.datos[0].fecha);\r\n      let arr = [];\r\n      for (let i = 0; i < sensor.datos.length; i++) {\r\n        arr.push(ultimoDato(matrix_val[i], sensor.datos[i].valor));\r\n      }\r\n      matrix_val = [...arr];\r\n    });\r\n    setValues(matrix_val);\r\n    setLabels(arr_dates);\r\n  };\r\n\r\n  const actualizar = () => {\r\n    setLabels((old) => {\r\n      return ultimoDato(old, sensores[0][0].fecha);\r\n    });\r\n    setValues((old) => {\r\n      let arr = [];\r\n      for (let i = 0; i < sensores[0].length; i++) {\r\n        arr.push(ultimoDato(old[i], sensores[0][i].valor));\r\n      }\r\n      return arr;\r\n    });\r\n  };\r\n\r\n  const resetZoom = () => {\r\n    chartRef.current.resetZoom();\r\n  };\r\n\r\n  useEffect(() => {\r\n    Chart.register(zoom);\r\n    if (sensores.length > 1) inicializar();\r\n    else if (sensores.length == 1) actualizar();\r\n  }, [sensores]);\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container-fluid\"\r\n        style={{ minHeight: \"40vh\", maxHeight: \"50vh\" }}\r\n      >\r\n        <Line\r\n          data={data(labels, values, arr_colors, sensores[0].datos)}\r\n          options={options}\r\n          ref={chartRef}\r\n        />\r\n        <CButton className=\"boton-reset\" onClick={resetZoom}>\r\n          Restablecer Zoom\r\n        </CButton>\r\n      </div>\r\n      <div className=\"mt-5\">\r\n        {sensores[0].datos.map((sensor, idx) => {\r\n          return (\r\n            <div id=\"accordion\" key={idx}>\r\n              <CCard className=\"mb-0\">\r\n                <CCardHeader className=\"contenedor-cabecera\">\r\n                  <CButton\r\n                    block\r\n                    className=\"text-left m-0 p-0 \"\r\n                    onClick={() => setAccordion(accordion === idx ? null : idx)}\r\n                  >\r\n                    <h5 className=\"m-0 p-0\">\r\n                      <span className=\"text-color\">\r\n                        {sensor.tipo} - {sensor.nombre} ({sensor.alias})\r\n                      </span>\r\n                    </h5>\r\n                  </CButton>\r\n                </CCardHeader>\r\n                <CCollapse show={accordion === idx}>\r\n                  <CCardBody>\r\n                    <pre>\r\n                      <h6>Fecha : {labels[labels.length - 1]} </h6>\r\n                    </pre>\r\n                    <pre>\r\n                      <h6>\r\n                        Valor (actual) :{\" \"}\r\n                        {values[idx][values[idx].length - 1] != undefined\r\n                          ? values[idx][values[idx].length - 1].toFixed(4)\r\n                          : 0}\r\n                      </h6>\r\n                    </pre>\r\n                  </CCardBody>\r\n                </CCollapse>\r\n              </CCard>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProyectosBasica;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Chart, Line } from \"react-chartjs-2\";\r\nimport {\r\n  CButton,\r\n  CCollapse,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n} from \"@coreui/react\";\r\nimport zoom from \"chartjs-plugin-zoom\";\r\nimport store from \"src/store\";\r\n\r\nconst data = (labels, values, arr_colors, etiquetas) => {\r\n  let hour = [];\r\n  let arr_values = [];\r\n  if (labels.length > 1) {\r\n    labels.forEach((label) => {\r\n      hour.push(label.slice(11, label.length));\r\n    });\r\n  }\r\n  values.forEach((v, idx) => {\r\n    arr_values.push({\r\n      label: `${etiquetas[idx].alias}`,\r\n      data: v,\r\n      fill: false,\r\n      backgroundColor: `rgb(${arr_colors[idx]})`,\r\n      borderColor: `rgb(${arr_colors[idx]}, 0.2)`,\r\n    });\r\n  });\r\n\r\n  return {\r\n    labels: hour,\r\n    datasets: arr_values,\r\n  };\r\n};\r\n\r\nconst options = {\r\n  scales: {\r\n    y: {\r\n      grace: \"0.25%\",\r\n    },\r\n  },\r\n  plugins: {\r\n    zoom: {\r\n      pan: {\r\n        enabled: true,\r\n        mode: \"xy\",\r\n      },\r\n      zoom: {\r\n        wheel: {\r\n          enabled: true,\r\n        },\r\n        pinch: {\r\n          enabled: true,\r\n        },\r\n        mode: \"xy\",\r\n        onZoomComplete({ chart }) {\r\n          chart.update(\"none\");\r\n        },\r\n      },\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n};\r\nconst arr_colors = [\"81,205,160\", \"109,120,173\", \"224,125,117\"];\r\n\r\nconst ProyectosLandmark = ({ sensores }) => {\r\n  const chartRef = useRef(null);\r\n  const { graficasDatos } = store.getState();\r\n  const arr_clean = sensores[0].datos.map(() => {\r\n    return [];\r\n  });\r\n  const [accordion, setAccordion] = useState();\r\n  const [labels, setLabels] = useState([]);\r\n  const [values, setValues] = useState(arr_clean);\r\n\r\n  const ultimoDato = (oldData, newData) => {\r\n    if (oldData.length < graficasDatos.corto) return [...oldData, newData];\r\n    else\r\n      return [\r\n        ...oldData.slice(\r\n          oldData.length - (graficasDatos.corto - 1),\r\n          oldData.length\r\n        ),\r\n        newData,\r\n      ];\r\n  };\r\n\r\n  const inicializar = () => {\r\n    let arr_dates = [];\r\n    let matrix_val = [...arr_clean];\r\n    sensores.forEach((sensor) => {\r\n      arr_dates.push(sensor.datos[0].fecha);\r\n      let arr = [];\r\n      for (let i = 0; i < sensor.datos.length; i++) {\r\n        arr.push(ultimoDato(matrix_val[i], sensor.datos[i].landmark.nivel[1]));\r\n      }\r\n      matrix_val = [...arr];\r\n    });\r\n    setValues(matrix_val);\r\n    setLabels(arr_dates);\r\n  };\r\n\r\n  const actualizar = () => {\r\n    setLabels((old) => {\r\n      return ultimoDato(old, sensores[0][0].fecha);\r\n    });\r\n    setValues((old) => {\r\n      let arr = [];\r\n      for (let i = 0; i < sensores[0].length; i++) {\r\n        arr.push(ultimoDato(old[i], sensores[0][i].landmark.nivel[1]));\r\n      }\r\n      return arr;\r\n    });\r\n  };\r\n\r\n  const resetZoom = () => {\r\n    chartRef.current.resetZoom();\r\n  };\r\n\r\n  useEffect(() => {\r\n    Chart.register(zoom);\r\n    if (sensores.length > 1) inicializar();\r\n    else if (sensores.length == 1) actualizar();\r\n  }, [sensores]);\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container-fluid\"\r\n        style={{ minHeight: \"40vh\", maxHeight: \"50vh\" }}\r\n      >\r\n        <Line\r\n          data={data(labels, values, arr_colors, sensores[0].datos)}\r\n          options={options}\r\n          ref={chartRef}\r\n        />\r\n        <CButton className=\"boton-reset\" onClick={resetZoom}>\r\n          Restablecer Zoom\r\n        </CButton>\r\n      </div>\r\n      <div className=\"mt-5\">\r\n        {sensores[0].datos.map((sensor, idx) => {\r\n          return (\r\n            <div id=\"accordion\" key={idx}>\r\n              <CCard className=\"mb-0 shadow\">\r\n                <CCardHeader className=\"contenedor-cabecera\">\r\n                  <CButton\r\n                    block\r\n                    className=\"text-left m-0 p-0 \"\r\n                    onClick={() => setAccordion(accordion === idx ? null : idx)}\r\n                  >\r\n                    <h5 className=\"m-0 p-0\">\r\n                      <span className=\"text-color\">\r\n                        {sensor.tipo} - {sensor.nombre} ({sensor.alias})\r\n                      </span>\r\n                    </h5>\r\n                  </CButton>\r\n                </CCardHeader>\r\n                <CCollapse show={accordion === idx}>\r\n                  <CCardBody>\r\n                    <pre>\r\n                      <h6>Fecha : {sensor.fecha} </h6>\r\n                    </pre>\r\n                    <pre>\r\n                      <h6>\r\n                        Valor (actual) : {sensor.landmark.nivel[1].toFixed(4)}\r\n                      </h6>\r\n                    </pre>\r\n                    <pre>\r\n                      <h6>\r\n                        Cambio t : {(sensor.landmark.deltai / 2).toFixed(4)} min\r\n                      </h6>\r\n                    </pre>\r\n                    <pre>\r\n                      <h6>Cambio f(t) : {sensor.landmark.deltay.toFixed(4)}</h6>\r\n                    </pre>\r\n                  </CCardBody>\r\n                </CCollapse>\r\n              </CCard>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProyectosLandmark;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Chart, Line } from \"react-chartjs-2\";\r\nimport {\r\n  CButton,\r\n  CCollapse,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n} from \"@coreui/react\";\r\nimport \"./ProyectosGraficas.css\";\r\nimport zoom from \"chartjs-plugin-zoom\";\r\nimport store from \"src/store\";\r\n\r\nconst data = (labels, values, arr_colors, etiquetas) => {\r\n  let hour = [];\r\n  let arr_values = [];\r\n  if (labels.length > 1) {\r\n    labels.forEach((label) => {\r\n      hour.push(label.slice(11, label.length));\r\n    });\r\n  }\r\n  values.forEach((v, idx) => {\r\n    arr_values.push({\r\n      label: `${etiquetas[idx].alias}`,\r\n      data: v,\r\n      fill: false,\r\n      backgroundColor: `rgb(${arr_colors[idx]})`,\r\n      borderColor: `rgb(${arr_colors[idx]}, 0.2)`,\r\n    });\r\n  });\r\n\r\n  return {\r\n    labels: hour,\r\n    datasets: arr_values,\r\n  };\r\n};\r\n\r\nconst options = {\r\n  scales: {\r\n    y: {\r\n      grace: \"0.25%\",\r\n    },\r\n  },\r\n  plugins: {\r\n    zoom: {\r\n      pan: {\r\n        enabled: true,\r\n        mode: \"xy\",\r\n      },\r\n      zoom: {\r\n        wheel: {\r\n          enabled: true,\r\n        },\r\n        pinch: {\r\n          enabled: true,\r\n        },\r\n        mode: \"xy\",\r\n        onZoomComplete({ chart }) {\r\n          chart.update(\"none\");\r\n        },\r\n      },\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n};\r\nconst arr_colors = [\"81,205,160\", \"109,120,173\", \"224,125,117\"];\r\n\r\nconst ProyectosPeligrosidad = ({ sensores }) => {\r\n  const chartRef = useRef(null);\r\n  const { graficasDatos } = store.getState();\r\n  const arr_clean = sensores[0].datos.map(() => {\r\n    return [];\r\n  });\r\n  const [accordion, setAccordion] = useState();\r\n  const [labels, setLabels] = useState([]);\r\n  const [values, setValues] = useState(arr_clean);\r\n\r\n  const ultimoDato = (oldData, newData) => {\r\n    if (oldData.length < graficasDatos.corto) return [...oldData, newData];\r\n    else\r\n      return [\r\n        ...oldData.slice(\r\n          oldData.length - (graficasDatos.corto - 1),\r\n          oldData.length\r\n        ),\r\n        newData,\r\n      ];\r\n  };\r\n\r\n  const inicializar = () => {\r\n    let arr_dates = [];\r\n    let matrix_val = [...arr_clean];\r\n    sensores.forEach((sensor) => {\r\n      arr_dates.push(sensor.datos[0].fecha);\r\n      let arr = [];\r\n      for (let i = 0; i < sensor.datos.length; i++) {\r\n        arr.push(\r\n          ultimoDato(\r\n            matrix_val[i],\r\n            sensor.datos[i].peligrosidad.peligrosidad[1]\r\n          )\r\n        );\r\n      }\r\n      matrix_val = [...arr];\r\n    });\r\n    setValues(matrix_val);\r\n    setLabels(arr_dates);\r\n  };\r\n\r\n  const actualizar = () => {\r\n    setLabels((old) => {\r\n      return ultimoDato(old, sensores[0][0].fecha);\r\n    });\r\n    setValues((old) => {\r\n      let arr = [];\r\n      for (let i = 0; i < sensores[0].length; i++) {\r\n        arr.push(\r\n          ultimoDato(old[i], sensores[0][i].peligrosidad.peligrosidad[1])\r\n        );\r\n      }\r\n      return arr;\r\n    });\r\n  };\r\n\r\n  const resetZoom = () => {\r\n    chartRef.current.resetZoom();\r\n  };\r\n\r\n  useEffect(() => {\r\n    Chart.register(zoom);\r\n    if (sensores.length > 1) inicializar();\r\n    else if (sensores.length == 1) actualizar();\r\n  }, [sensores]);\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container-fluid\"\r\n        style={{ minHeight: \"40vh\", maxHeight: \"50vh\" }}\r\n      >\r\n        <Line\r\n          data={data(labels, values, arr_colors, sensores[0].datos)}\r\n          options={options}\r\n          ref={chartRef}\r\n        />\r\n        <CButton className=\"boton-reset\" onClick={resetZoom}>\r\n          Restablecer Zoom\r\n        </CButton>\r\n      </div>\r\n      <div className=\"mt-5\">\r\n        {sensores[0].datos.map((sensor, idx) => {\r\n          return (\r\n            <div id=\"accordion\" key={idx}>\r\n              <CCard className=\"mb-0 shadow\">\r\n                <CCardHeader className=\"contenedor-cabecera\">\r\n                  <CButton\r\n                    block\r\n                    className=\"text-left m-0 p-0 \"\r\n                    onClick={() => setAccordion(accordion === idx ? null : idx)}\r\n                  >\r\n                    <h5 className=\"m-0 p-0\">\r\n                      <span className=\"text-color\">\r\n                        {sensor.tipo} - {sensor.nombre} ({sensor.alias})\r\n                      </span>\r\n                    </h5>\r\n                  </CButton>\r\n                </CCardHeader>\r\n                <CCollapse show={accordion === idx}>\r\n                  <CCardBody>\r\n                    <pre>\r\n                      <h6>Fecha : {sensor.fecha} </h6>\r\n                    </pre>\r\n                    <pre>\r\n                      <h6>\r\n                        Tendencia (sostenida) :\r\n                        {sensor.peligrosidad.peligrosidad[0].toFixed(4)}\r\n                      </h6>\r\n                    </pre>\r\n                    <pre>\r\n                      <h6>\r\n                        Tendencia (actual) :\r\n                        {sensor.peligrosidad.peligrosidad[1].toFixed(4)}\r\n                      </h6>\r\n                    </pre>\r\n                    <pre>\r\n                      <h6>\r\n                        Delta f(t) (sostenido) :\r\n                        {sensor.peligrosidad.deltay[1].toFixed(4)}\r\n                      </h6>\r\n                    </pre>\r\n                    <pre>\r\n                      <h6>\r\n                        Delta f(t) (actual) :\r\n                        {sensor.peligrosidad.deltay[1].toFixed(4)}\r\n                      </h6>\r\n                    </pre>\r\n                  </CCardBody>\r\n                </CCollapse>\r\n              </CCard>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProyectosPeligrosidad;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  getPaquetesAPI,\r\n  getProyectoById,\r\n  getProyectosPaquetesApi,\r\n  getRecursosAPI,\r\n} from \"src/helpers/peticionesAPI\";\r\nimport { CCard, CCardBody, CCardGroup, CCardHeader, CCol, CRow } from \"@coreui/react\";\r\nimport ProyectosBasica from \"./ProyectosBasica\";\r\nimport Loader from \"src/reusable/Loader\";\r\n\r\nconst ProyectosBasicas = ({ idProyecto }) => {\r\n  const [graficasProyectosBasicas, setGraficasProyectosBasicas] = useState([]);\r\n  const [cargando, setCargando] = useState(true);\r\n  const intervalo = useRef(null)\r\n  const token = localStorage.getItem(\"token\");\r\n  const id = idProyecto;\r\n  const tarjeta = \"19686\";\r\n\r\n  const getData = async () => {\r\n    const [{\r\n      graficas: graficas_proyecto,\r\n      sensores: sensores_proyecto,\r\n      variables: variables_proyecto,\r\n    },{ sensores: lista_sensores }] = await Promise.all([\r\n      getProyectoById(token, id),\r\n      getRecursosAPI(tarjeta, token)\r\n    ]);\r\n\r\n    let str_sensores = [];\r\n    let str_variables = [];\r\n    variables_proyecto.forEach((variable) => {\r\n      str_variables.push(`${id}.V${variable.index}`);\r\n    });\r\n    sensores_proyecto.forEach((sensor) => {\r\n      str_sensores.push(`${sensor.direccion}`);\r\n    });\r\n\r\n    let [{ sensores: sensores_datos },{ variables: variables_datos }] = await Promise.all([\r\n      getPaquetesAPI(str_sensores,token,10),\r\n      getProyectosPaquetesApi(str_variables,token,10)\r\n    ]);    \r\n\r\n    variables_datos = variables_datos.reverse();\r\n    sensores_datos = sensores_datos.reverse();\r\n\r\n    let arr_graficas = [];\r\n    graficas_proyecto.forEach((grafica) => {\r\n      let arr_grafica = [];\r\n      for (let i = 0; i < variables_datos.length; i++) {\r\n        let arr_variables = [];\r\n        let arr_sensores = [];\r\n        grafica.direcciones.forEach((direccion) => {\r\n          if (direccion[0] === \"V\") {\r\n            const variable_index = variables_proyecto.find(\r\n              (variable) => variable.index === parseInt(direccion.substring(1))\r\n            );\r\n            if (variable_index.estado === \"activo\") {\r\n              arr_variables.push({\r\n                nombre: variable_index.nombre,\r\n                alias: variable_index.alias,\r\n                tipo: \"V\",\r\n                ...variables_datos[i][parseInt(variable_index.index)],\r\n              });\r\n            }\r\n          } else {\r\n            const direccion_proyecto = parseInt(direccion.substring(1));\r\n            const direccion_sensor = sensores_proyecto[direccion_proyecto].direccion;\r\n            const sensor_index = direccion_sensor.substring(\r\n              direccion_sensor.indexOf(\".\") + 2\r\n            );\r\n            const sensor_info = lista_sensores.find(\r\n              (sensor) => sensor.index === parseInt(sensor_index)\r\n            );\r\n            if (sensor_info.estado === \"activo\") {\r\n              arr_sensores.push({\r\n                nombre: sensor_info.nombre,\r\n                alias: sensor_info.alias,\r\n                tipo: \"S\",\r\n                ...sensores_datos[i][direccion_proyecto],\r\n              });\r\n            }\r\n          }\r\n        });\r\n        if (arr_variables.length > 0) {\r\n          arr_grafica.push(arr_variables);\r\n        }\r\n        if (arr_sensores.length > 0) {\r\n          arr_grafica.push(arr_sensores);\r\n        }\r\n      }\r\n      if (arr_grafica.length > 0) {\r\n        arr_graficas.push({ nombre: grafica.nombre, datos: arr_grafica });\r\n      }\r\n    });\r\n    setGraficasProyectosBasicas(arr_graficas);\r\n  };\r\n  const getIntervalo = () => {\r\n    return setInterval(async () => {\r\n      const [{\r\n        graficas: graficas_proyecto,\r\n        sensores: sensores_proyecto,\r\n        variables: variables_proyecto,\r\n      },{ sensores: lista_sensores }] = await Promise.all([\r\n        getProyectoById(token, id),\r\n        getRecursosAPI(tarjeta, token)\r\n      ]);\r\n  \r\n      let str_sensores = [];\r\n      let str_variables = [];\r\n      variables_proyecto.forEach((variable) => {\r\n        str_variables.push(`${id}.V${variable.index}`);\r\n      });\r\n      sensores_proyecto.forEach((sensor) => {\r\n        str_sensores.push(`${sensor.direccion}`);\r\n      });\r\n\r\n      let [{ sensores: sensores_datos },{ variables: variables_datos }] = await Promise.all([\r\n        getPaquetesAPI(str_sensores,token,1),\r\n        getProyectosPaquetesApi(str_variables,token,1)\r\n      ]);  \r\n\r\n      let arr_graficas = [];\r\n      graficas_proyecto.forEach((grafica) => {\r\n        let arr_grafica = [];\r\n        for (let i = 0; i < variables_datos.length; i++) {\r\n          let arr_variables = [];\r\n          let arr_sensores = [];\r\n          grafica.direcciones.forEach((direccion) => {\r\n            if (direccion[0] === \"V\") {\r\n              const variable_index = variables_proyecto.find(\r\n                (variable) =>\r\n                  variable.index === parseInt(direccion.substring(1))\r\n              );\r\n              if (variable_index.estado === \"activo\") {\r\n                arr_variables.push({\r\n                  nombre: variable_index.nombre,\r\n                  alias: variable_index.alias,\r\n                  tipo: \"V\",\r\n                  ...variables_datos[i][parseInt(variable_index.index)],\r\n                });\r\n              }\r\n            } else {\r\n              const direccion_proyecto = parseInt(direccion.substring(1));\r\n              const direccion_sensor = sensores_proyecto[direccion_proyecto].direccion;\r\n              const sensor_index = direccion_sensor.substring(\r\n                direccion_sensor.indexOf(\".\") + 2\r\n              );\r\n              const sensor_info = lista_sensores.find(\r\n                (sensor) => sensor.index === parseInt(sensor_index)\r\n              );\r\n              if (sensor_info.estado === \"activo\") {\r\n                arr_sensores.push({\r\n                  nombre: sensor_info.nombre,\r\n                  alias: sensor_info.alias,\r\n                  tipo: \"S\",\r\n                  ...sensores_datos[i][direccion_proyecto],\r\n                });\r\n              }\r\n            }\r\n          });\r\n          if (arr_variables.length > 0) {\r\n            arr_grafica.push(arr_variables);\r\n          }\r\n          if (arr_sensores.length > 0) {\r\n            arr_grafica.push(arr_sensores);\r\n          }\r\n        }\r\n        if (arr_grafica.length > 0) {\r\n          arr_graficas.push({ nombre: grafica.nombre, datos: arr_grafica });\r\n        }\r\n      });\r\n      setGraficasProyectosBasicas(arr_graficas);\r\n    }, 30000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    return ()=>{\r\n      if(intervalo.current!=null)\r\n        clearInterval(intervalo.current);  \r\n    }\r\n  },[])\r\n  useEffect(async () => {\r\n    setCargando(true);\r\n    if(intervalo.current!=null){\r\n      clearInterval(intervalo.current);\r\n      intervalo.current = null;\r\n    }\r\n    await getData();\r\n    intervalo.current = getIntervalo();\r\n    setCargando(false);\r\n  }, [idProyecto]);\r\n\r\n  if (cargando)\r\n    return (\r\n      <div style={{ display: \"grid\", placeItems: \"center\", height: \"40vh\" }}>\r\n        <Loader height=\"10vh\" />\r\n      </div>\r\n    );\r\n  return (\r\n    <div>\r\n       <CRow>\r\n        {graficasProyectosBasicas.map((grafica, idx) => {\r\n          // console.log(grafica.datos)\r\n          return (\r\n            <CCol sm=\"12\" md=\"6\" key={idx}>\r\n              <CCard className=\"shadow\">\r\n                <CCardHeader className=\"contenedor-cabecera\">\r\n                  <h6 className=\"m-2\">{grafica.nombre}</h6>\r\n                </CCardHeader>\r\n                <CCardBody>\r\n                  <ProyectosBasica sensores={grafica.datos} />\r\n                </CCardBody>\r\n              </CCard>\r\n            </CCol>\r\n          );\r\n        })}\r\n       </CRow>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProyectosBasicas;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { CCard, CCardBody, CCardGroup, CCardHeader, CCol, CRow } from \"@coreui/react\";\r\nimport {\r\n  getLandmarksAPI,\r\n  getProyectoById,\r\n  getRecursosAPI,\r\n} from \"src/helpers/peticionesAPI\";\r\nimport ProyectosLandmark from \"./ProyectosLandmark\";\r\nimport Loader from \"src/reusable/Loader\";\r\n\r\nconst ProyectosLandmarks = ({ idProyecto }) => {\r\n  const [graficasProyectosLandmarks, setGraficasProyectosLandmarks] = useState([]);\r\n  const [cargando, setCargando] = useState(true);\r\n  const intervalo = useRef(null)\r\n  const token = localStorage.getItem(\"token\");\r\n  const id = idProyecto;\r\n  const tarjeta = \"19686\";\r\n\r\n  const getData = async () => {\r\n    const [{\r\n      graficas: graficas_proyecto,\r\n      sensores: sensores_proyecto,\r\n    },{ sensores: lista_sensores }] = await Promise.all([\r\n      getProyectoById(token, id),\r\n      getRecursosAPI(tarjeta, token)\r\n    ]);\r\n\r\n    let str_sensores = [];\r\n    sensores_proyecto.forEach((sensor) => {\r\n      str_sensores.push(`${sensor.direccion}`);\r\n    });\r\n    let { sensores: sensores_datos } = await getLandmarksAPI(\r\n      str_sensores,\r\n      token,\r\n      10\r\n    );\r\n    sensores_datos = sensores_datos.reverse();\r\n\r\n    let arr_graficas = [];\r\n    graficas_proyecto.forEach((grafica) => {\r\n      let arr_grafica = [];\r\n      for (let i = 0; i < sensores_datos.length; i++) {\r\n        let arr_sensores = [];\r\n        grafica.direcciones.forEach((direccion) => {\r\n          if (direccion[0] === \"S\") {\r\n            const direccionproyecto = parseInt(direccion.substring(1));\r\n            const direccion_sensor = sensores_proyecto[direccionproyecto].direccion;\r\n            const sensor_index = direccion_sensor.substring(\r\n              direccion_sensor.indexOf(\".\") + 2\r\n            );\r\n            const sensor_info = lista_sensores.find(\r\n              (sensor) => sensor.index === parseInt(sensor_index)\r\n            );\r\n            if (sensor_info.estado === \"activo\") {\r\n              arr_sensores.push({\r\n                nombre: sensor_info.nombre,\r\n                alias: sensor_info.alias,\r\n                tipo: \"S\",\r\n                ...sensores_datos[i][direccionproyecto],\r\n              });\r\n            }\r\n          }\r\n        });\r\n        if (arr_sensores.length > 0) {\r\n          arr_grafica.push(arr_sensores);\r\n        }\r\n      }\r\n      if (arr_grafica.length > 0) {\r\n        arr_graficas.push({ nombre: grafica.nombre, datos: arr_grafica });\r\n      }\r\n    });\r\n    setGraficasProyectosLandmarks(arr_graficas);\r\n  };\r\n  const getIntervalo = () => {\r\n    setInterval(async () => {\r\n      const [{\r\n        graficas: graficas_proyecto,\r\n        sensores: sensores_proyecto,\r\n      },{ sensores: lista_sensores }] = await Promise.all([\r\n        getProyectoById(token, id),\r\n        getRecursosAPI(tarjeta, token)\r\n      ]);\r\n\r\n      let str_sensores = [];\r\n      sensores_proyecto.forEach((sensor) => {\r\n        str_sensores.push(`${sensor.direccion}`);\r\n      });\r\n      let { sensores: sensores_datos } = await getLandmarksAPI(\r\n        str_sensores,\r\n        token,\r\n        1\r\n      );\r\n      sensores_datos = sensores_datos.reverse();\r\n\r\n      let arr_graficas = [];\r\n      graficas_proyecto.forEach((grafica) => {\r\n        let arr_grafica = [];\r\n        for (let i = 0; i < sensores_datos.length; i++) {\r\n          let arr_sensores = [];\r\n          grafica.direcciones.forEach((direccion) => {\r\n            if (direccion[0] === \"S\") {\r\n              const direccionproyecto = parseInt(direccion.substring(1));\r\n              const direccion_sensor = sensores_proyecto[direccionproyecto].direccion;\r\n              const sensor_index = direccion_sensor.substring(\r\n                direccion_sensor.indexOf(\".\") + 2\r\n              );\r\n              const sensor_info = lista_sensores.find(\r\n                (sensor) => sensor.index === parseInt(sensor_index)\r\n              );\r\n              if (sensor_info.estado === \"activo\") {\r\n                arr_sensores.push({\r\n                  nombre: sensor_info.nombre,\r\n                  alias: sensor_info.alias,\r\n                  tipo: \"S\",\r\n                  ...sensores_datos[i][direccionproyecto],\r\n                });\r\n              }\r\n            }\r\n          });\r\n          if (arr_sensores.length > 0) {\r\n            arr_grafica.push(arr_sensores);\r\n          }\r\n        }\r\n        if (arr_grafica.length > 0) {\r\n          arr_graficas.push({ nombre: grafica.nombre, datos: arr_grafica });\r\n        }\r\n      });\r\n      setGraficasProyectosLandmarks(arr_graficas);\r\n    }, 30000);\r\n  };\r\n  \r\n  useEffect(() => {    \r\n    return () => {\r\n      if(intervalo.current!=null)\r\n        clearInterval(intervalo.current);\r\n    }\r\n  }, [])\r\n  useEffect(async () => {\r\n    setCargando(true);\r\n    if(intervalo.current!=null){\r\n      clearInterval(intervalo.current);\r\n      intervalo.current = null;\r\n    }\r\n    await getData();\r\n    intervalo.current = getIntervalo();\r\n    setCargando(false);\r\n  }, [idProyecto]);\r\n\r\n  if (cargando)\r\n    return (\r\n      <div style={{ display: \"grid\", placeItems: \"center\", height: \"40vh\" }}>\r\n        <Loader height=\"10vh\" />\r\n      </div>\r\n    );\r\n  return (\r\n    <CRow>\r\n      {graficasProyectosLandmarks.map((grafica, idx) => {\r\n        return (\r\n          <CCol sm=\"12\" md=\"6\" key={idx}>\r\n            <CCard className=\"shadow\">\r\n              <CCardHeader className=\"contenedor-cabecera\">\r\n                <h6 className=\"m-2\">{grafica.nombre}</h6>\r\n              </CCardHeader>\r\n              <CCardBody>\r\n                <ProyectosLandmark sensores={grafica.datos} />\r\n              </CCardBody>\r\n            </CCard>\r\n          </CCol>\r\n        );\r\n      })}\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default ProyectosLandmarks;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { CCard, CCardBody, CCardGroup, CCardHeader, CCol, CRow } from \"@coreui/react\";\r\nimport {\r\n  getPeligrosidadAPI,\r\n  getProyectoById,\r\n  getRecursosAPI,\r\n} from \"src/helpers/peticionesAPI\";\r\nimport ProyectosPeligrosidad from \"./ProyectosPeligrosidad\";\r\n\r\nconst ProyectosPeligrosidades = ({ idProyecto }) => {\r\n  const [graficasProyectosPeli, setGraficasProyectosPeli] = useState([]);\r\n  const [cargando, setCargando] = useState(true);\r\n  const intervalo = useRef(null)\r\n\r\n  const token = localStorage.getItem(\"token\");\r\n  const id = idProyecto;\r\n  const tarjeta = \"19686\";\r\n\r\n  const getData = async () => {\r\n    const [{\r\n      graficas: graficas_proyecto,\r\n      sensores: sensores_proyecto,\r\n    },{ sensores: lista_sensores }] = await Promise.all([\r\n      getProyectoById(token, id),\r\n      getRecursosAPI(tarjeta, token)\r\n    ]);\r\n\r\n    let str_sensores = [];\r\n    sensores_proyecto.forEach((sensor) => {\r\n      str_sensores.push(`${sensor.direccion}`);\r\n    });\r\n    let { sensores: sensores_datos } = await getPeligrosidadAPI(\r\n      str_sensores,\r\n      token,\r\n      10\r\n    );\r\n    sensores_datos = sensores_datos.reverse();\r\n\r\n    let arr_graficas = [];\r\n    graficas_proyecto.forEach((grafica) => {\r\n      let arr_grafica = [];\r\n      for (let i = 0; i < sensores_datos.length; i++) {\r\n        let arr_sensores = [];\r\n        grafica.direcciones.forEach((direccion) => {\r\n          if (direccion[0] === \"S\") {\r\n            const direccionproyecto = parseInt(direccion.substring(1));\r\n            const direccion_sensor = sensores_proyecto[direccionproyecto].direccion;\r\n            const sensor_index = direccion_sensor.substring(\r\n              direccion_sensor.indexOf(\".\") + 2\r\n            );\r\n\r\n            const sensor_info = lista_sensores.find(\r\n              (sensor) => sensor.index === parseInt(sensor_index)\r\n            );\r\n            if (sensor_info.estado === \"activo\") {\r\n              arr_sensores.push({\r\n                nombre: sensor_info.nombre,\r\n                alias: sensor_info.alias,\r\n                tipo: \"S\",\r\n                ...sensores_datos[i][direccionproyecto],\r\n              });\r\n            }\r\n          }\r\n        });\r\n        if (arr_sensores.length > 0) {\r\n          arr_grafica.push(arr_sensores);\r\n        }\r\n      }\r\n      if (arr_grafica.length > 0) {\r\n        arr_graficas.push({ nombre: grafica.nombre, datos: arr_grafica });\r\n      }\r\n    });\r\n    setGraficasProyectosPeli(arr_graficas);\r\n  };\r\n\r\n  const getIntervalo = () => {\r\n    setInterval(async () => {\r\n      const [{\r\n        graficas: graficas_proyecto,\r\n        sensores: sensores_proyecto,\r\n      },{ sensores: lista_sensores }] = await Promise.all([\r\n        getProyectoById(token, id),\r\n        getRecursosAPI(tarjeta, token)\r\n      ]);\r\n\r\n      let str_sensores = [];\r\n      sensores_proyecto.forEach((sensor) => {\r\n        str_sensores.push(`${sensor.direccion}`);\r\n      });\r\n      let { sensores: sensores_datos } = await getPeligrosidadAPI(\r\n        str_sensores,\r\n        token,\r\n        1\r\n      );\r\n\r\n      let arr_graficas = [];\r\n      graficas_proyecto.forEach((grafica) => {\r\n        let arr_grafica = [];\r\n        for (let i = 0; i < sensores_datos.length; i++) {\r\n          let arr_sensores = [];\r\n          grafica.direcciones.forEach((direccion) => {\r\n            if (direccion[0] === \"S\") {\r\n              const direccionproyecto = parseInt(direccion.substring(1));\r\n              const direccion_sensor = sensores_proyecto[direccionproyecto].direccion;\r\n              const sensor_index = direccion_sensor.substring(\r\n                direccion_sensor.indexOf(\".\") + 2\r\n              );\r\n              const sensor_info = lista_sensores.find(\r\n                (sensor) => sensor.index === parseInt(sensor_index)\r\n              );\r\n              if (sensor_info.estado === \"activo\") {\r\n                arr_sensores.push({\r\n                  nombre: sensor_info.nombre,\r\n                  alias: sensor_info.alias,\r\n                  tipo: \"S\",\r\n                  ...sensores_datos[i][direccionproyecto],\r\n                });\r\n              }\r\n            }\r\n          });\r\n          if (arr_sensores.length > 0) {\r\n            arr_grafica.push(arr_sensores);\r\n          }\r\n        }\r\n        if (arr_grafica.length > 0) {\r\n          arr_graficas.push({ nombre: grafica.nombre, datos: arr_grafica });\r\n        }\r\n      });\r\n      setGraficasProyectosPeli(arr_graficas);\r\n    }, 30000);\r\n  };  \r\n\r\n  useEffect(() => {    \r\n    return () => {\r\n      if(intervalo.current!=null)\r\n        clearInterval(intervalo.current);\r\n    }\r\n  }, [])\r\n  useEffect(async () => {\r\n    setCargando(true);\r\n    if(intervalo.current!=null){\r\n      clearInterval(intervalo.current);\r\n      intervalo.current = null;\r\n    }\r\n    await getData();\r\n    intervalo.current = getIntervalo();\r\n    setCargando(false);\r\n  }, [idProyecto]);\r\n\r\n  return (\r\n    <CRow>\r\n      {graficasProyectosPeli.map((grafica, idx) => {\r\n        return (\r\n          <CCol sm=\"12\" md=\"6\" key={idx}>\r\n            <CCard className=\"shadow\">\r\n              <CCardHeader className=\"contenedor-cabecera\">\r\n                <h6 className=\"m-2\">{grafica.nombre}</h6>\r\n              </CCardHeader>\r\n              <CCardBody>\r\n                <ProyectosPeligrosidad sensores={grafica.datos} />\r\n              </CCardBody>\r\n            </CCard>\r\n          </CCol>\r\n        );\r\n      })}\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default ProyectosPeligrosidades;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CSelect,\r\n  CRow,\r\n  CCol,\r\n} from \"@coreui/react\";\r\nimport ProyectosBasica from \"./ProyectosBasica\";\r\nimport ProyectosLandmark from \"./ProyectosLandmark\";\r\nimport ProyectosPeligrosidad from \"./ProyectosPeligrosidad\";\r\n\r\nconst ProyectosGraficas = ({ graficaActiva, idx }) => {\r\n  const [custom, setCustom] = useState(\"Basica\");\r\n\r\n  const handleChange = (e) => {\r\n    setCustom(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <CCard className=\"shadow\" key={idx}>\r\n      <CCardHeader className=\"contenedor-cabecera\">\r\n        <CRow className=\"justify-content-between align-items-center\">\r\n          <CCol sm=\"6\" className=\"my-2\">\r\n            <h5 className=\"m-0\">{graficaActiva.nombre}</h5>\r\n          </CCol>\r\n          <CCol sm=\"6\" className=\"my-2\">\r\n            <CCol xs=\"12\">\r\n              {graficaActiva.datos.tipo === \"sensores\" ? (\r\n                <CSelect\r\n                  custom\r\n                  name=\"select\"\r\n                  id=\"select\"\r\n                  value={custom}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"Basica\">Basica</option>\r\n                  <option value=\"Nivel\">Nivel</option>\r\n                  <option value=\"Tendencia\">Tendencia</option>\r\n                </CSelect>\r\n              ) : null}\r\n            </CCol>\r\n          </CCol>\r\n        </CRow>\r\n      </CCardHeader>\r\n      <CCardBody>\r\n        <div className={custom === \"Basica\" ? \"\" : \"ocultar\"}>\r\n          {/* {graficaActiva.datos.valores} */}\r\n          <ProyectosBasica sensores={graficaActiva.datos.valores} />\r\n        </div>\r\n        {graficaActiva.datos.tipo === \"sensores\" ? (\r\n          <>\r\n            <div className={custom === \"Nivel\" ? \"\" : \"ocultar\"}>\r\n              <ProyectosLandmark sensores={graficaActiva.datos.valores} />\r\n            </div>\r\n            <div className={custom === \"Tendencia\" ? \"\" : \"ocultar\"}>\r\n              <ProyectosPeligrosidad sensores={graficaActiva.datos.valores} />\r\n            </div>\r\n          </>\r\n        ) : null}\r\n      </CCardBody>\r\n    </CCard>\r\n  );\r\n};\r\n\r\nexport default ProyectosGraficas;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { CCardGroup, CCol, CRow } from \"@coreui/react\";\r\nimport {\r\n  getLandmarksAPI,\r\n  getPaquetesAPI,\r\n  getPeligrosidadAPI,\r\n  getProyectoById,\r\n  getProyectosPaquetesApi,\r\n  getRecursosAPI,\r\n} from \"src/helpers/peticionesAPI\";\r\nimport ProyectosGraficas from \"./ProyectosGraficas\";\r\nimport Loader from \"src/reusable/Loader\";\r\n\r\nconst ProyectosCustom = ({ idProyecto}) => {\r\n  const [graficasProyectosCustom, setGraficasProyectosCustom] = useState([]);\r\n  const [cargando, setCargando] = useState(false)\r\n  const intervalo = useRef(null);\r\n  const token = localStorage.getItem(\"token\");\r\n  const id = idProyecto;\r\n  const tarjeta = \"19686\";\r\n\r\n  const getValor = async () => {\r\n    const [{\r\n      graficas: graficas_proyecto,\r\n      sensores: sensores_proyecto,\r\n      variables: variables_proyecto,\r\n    },{ sensores: lista_sensores }] = await Promise.all([\r\n      getProyectoById(token, id),\r\n      getRecursosAPI(tarjeta, token)\r\n    ]);\r\n\r\n    let str_sensores = [];\r\n    let str_variables = [];\r\n    variables_proyecto.forEach((variable) => {\r\n      str_variables.push(`${id}.V${variable.index}`);\r\n    });\r\n    sensores_proyecto.forEach((sensor) => {\r\n      str_sensores.push(`${sensor.direccion}`);\r\n    });\r\n    let [ { sensores: sensores_datos },\r\n          { sensores: sensores_landmark },\r\n          { sensores: sensores_peligrosidad },\r\n          { variables: variables_datos }\r\n        ] = await Promise.all([\r\n      getPaquetesAPI(str_sensores,token,10),\r\n      getLandmarksAPI(str_sensores,token,10),\r\n      getPeligrosidadAPI(str_sensores,token,10),\r\n      getProyectosPaquetesApi(str_variables,token,10)\r\n    ]);\r\n    \r\n    sensores_datos = sensores_datos.reverse();\r\n    sensores_landmark = sensores_landmark.reverse();\r\n    sensores_peligrosidad = sensores_peligrosidad.reverse();\r\n    variables_datos = variables_datos.reverse();\r\n\r\n    let arr_graficas = [];\r\n    graficas_proyecto.forEach((grafica) => {\r\n      let arr_grafica = [];\r\n      for (let i = 0; i < variables_datos.length; i++) {\r\n        let arr_variables = [];\r\n        let arr_sensores = [];\r\n        grafica.direcciones.forEach((direccion) => {\r\n          if (direccion[0] === \"V\") {\r\n            const variable_index = variables_proyecto.find(\r\n              (variable) => variable.index === parseInt(direccion.substring(1))\r\n            );\r\n            if (variable_index.estado === \"activo\") {\r\n              arr_variables.push({\r\n                nombre: variable_index.nombre,\r\n                alias: variable_index.alias,\r\n                tipo: \"V\",\r\n                ...variables_datos[i][parseInt(variable_index.index)],\r\n              });\r\n            }\r\n          } else {\r\n            const direccion_proyecto = parseInt(direccion.substring(1));\r\n            const direccion_sensor = sensores_proyecto[direccion_proyecto].direccion;\r\n            const sensor_index = direccion_sensor.substring(\r\n              direccion_sensor.indexOf(\".\") + 2\r\n            );\r\n            const sensor_info = lista_sensores.find(\r\n              (sensor) => sensor.index === parseInt(sensor_index)\r\n            );\r\n            if (sensor_info.estado === \"activo\") {\r\n              arr_sensores.push({\r\n                nombre: sensor_info.nombre,\r\n                alias: sensor_info.alias,\r\n                tipo: \"S\",\r\n                ...sensores_datos[i][direccion_proyecto],\r\n                ...sensores_landmark[i][direccion_proyecto],\r\n                ...sensores_peligrosidad[i][direccion_proyecto],\r\n              });\r\n            }\r\n          }\r\n        });\r\n        if (arr_variables.length > 0) {\r\n          arr_grafica.push(arr_variables);\r\n        }\r\n        if (arr_sensores.length > 0) {\r\n          arr_grafica.push(arr_sensores);\r\n        }\r\n      }\r\n      if (arr_grafica.length > 0) {\r\n        arr_graficas.push(\r\n          grafica.direcciones[0][0] === \"V\"\r\n            ? {\r\n                nombre: grafica.nombre,\r\n                datos: { tipo: \"variables\", valores: arr_grafica },\r\n              }\r\n            : {\r\n                nombre: grafica.nombre,\r\n                datos: { tipo: \"sensores\", valores: arr_grafica },\r\n              }\r\n        );\r\n      }\r\n    });\r\n\r\n    setGraficasProyectosCustom(arr_graficas);\r\n  };\r\n  const getIntervalo = () => {\r\n    return setInterval(async () => {\r\n      const [{\r\n        graficas: graficas_proyecto,\r\n        sensores: sensores_proyecto,\r\n        variables: variables_proyecto,\r\n      },{ sensores: lista_sensores }] = await Promise.all([\r\n        getProyectoById(token, id),\r\n        getRecursosAPI(tarjeta, token)\r\n      ]);\r\n\r\n      let str_sensores = [];\r\n      let str_variables = [];\r\n      variables_proyecto.forEach((variable) => {\r\n        str_variables.push(`${id}.V${variable.index}`);\r\n      });\r\n      sensores_proyecto.forEach((sensor) => {\r\n        str_sensores.push(`${sensor.direccion}`);\r\n      });\r\n      let [ { sensores: sensores_datos },\r\n            { sensores: sensores_landmark },\r\n            { sensores: sensores_peligrosidad },\r\n            { variables: variables_datos }\r\n          ] = await Promise.all([\r\n        getPaquetesAPI(str_sensores,token,1),\r\n        getLandmarksAPI(str_sensores,token,1),\r\n        getPeligrosidadAPI(str_sensores,token,1),\r\n        getProyectosPaquetesApi(str_variables,token,1)\r\n      ]);\r\n\r\n      let arr_graficas = [];\r\n      graficas_proyecto.forEach((grafica) => {\r\n        let arr_grafica = [];\r\n        for (let i = 0; i < variables_datos.length; i++) {\r\n          let arr_variables = [];\r\n          let arr_sensores = [];\r\n          grafica.direcciones.forEach((direccion) => {\r\n            if (direccion[0] === \"V\") {\r\n              const variable_index = variables_proyecto.find(\r\n                (variable) =>\r\n                  variable.index === parseInt(direccion.substring(1))\r\n              );\r\n              if (variable_index.estado === \"activo\") {\r\n                arr_variables.push({\r\n                  nombre: variable_index.nombre,\r\n                  alias: variable_index.alias,\r\n                  tipo: \"V\",\r\n                  ...variables_datos[i][parseInt(variable_index.index)],\r\n                });\r\n              }\r\n            } else {\r\n              const direccion_proyecto = parseInt(direccion.substring(1));\r\n              const direccion_sensor = sensores_proyecto[direccion_proyecto].direccion;\r\n              const sensor_index = direccion_sensor.substring(\r\n                direccion_sensor.indexOf(\".\") + 2\r\n              );\r\n              const sensor_info = lista_sensores.find(\r\n                (sensor) => sensor.index === parseInt(sensor_index)\r\n              );\r\n              if (sensor_info.estado === \"activo\") {\r\n                arr_sensores.push({\r\n                  nombre: sensor_info.nombre,\r\n                  alias: sensor_info.alias,\r\n                  tipo: \"S\",\r\n                  ...sensores_datos[i][direccion_proyecto],\r\n                  ...sensores_landmark[i][direccion_proyecto],\r\n                  ...sensores_peligrosidad[i][direccion_proyecto],\r\n                });\r\n              }\r\n            }\r\n          });\r\n          if (arr_variables.length > 0) {\r\n            arr_grafica.push(arr_variables);\r\n          }\r\n          if (arr_sensores.length > 0) {\r\n            arr_grafica.push(arr_sensores);\r\n          }\r\n        }\r\n        if (arr_grafica.length > 0) {\r\n          arr_graficas.push(\r\n            grafica.direcciones[0][0] === \"V\"\r\n              ? {\r\n                  nombre: grafica.nombre,\r\n                  datos: { tipo: \"variables\", valores: arr_grafica },\r\n                }\r\n              : {\r\n                  nombre: grafica.nombre,\r\n                  datos: { tipo: \"sensores\", valores: arr_grafica },\r\n                }\r\n          );\r\n        }\r\n      });\r\n      setGraficasProyectosCustom(arr_graficas);\r\n    }, 30000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    return ()=>{\r\n      if(intervalo.current!=null)\r\n        clearInterval(intervalo.current);\r\n    }\r\n  },[])\r\n  useEffect(async () => {\r\n    setCargando(true);\r\n    if(intervalo.current!=null){\r\n      clearInterval(intervalo.current);\r\n      intervalo.current = null;\r\n    }\r\n    await getValor();\r\n    intervalo.current = getIntervalo();\r\n    setCargando(false);\r\n  }, [idProyecto]);\r\n\r\n  if (cargando)\r\n    return (\r\n      <div style={{ display: \"grid\", placeItems: \"center\", height: \"40vh\" }}>\r\n        <Loader height=\"10vh\" />\r\n      </div>\r\n    );\r\n  return (\r\n    <div>\r\n      <CRow>\r\n        {graficasProyectosCustom.map((grafica, idx) => {\r\n          return (\r\n            <CCol sm=\"12\" md=\"6\" key={idx}>\r\n              <ProyectosGraficas graficaActiva={grafica} idx={idx} />\r\n            </CCol>\r\n          );\r\n        })}\r\n      </CRow>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProyectosCustom;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CContainer,\r\n  CRow,\r\n  CCol,\r\n  CCard,\r\n  CCardHeader,\r\n  CCardBody,\r\n  CTabs,\r\n  CNav,\r\n  CNavItem,\r\n  CNavLink,\r\n  CTabContent,\r\n  CTabPane,\r\n  CListGroup,\r\n  CListGroupItem,\r\n  CButton,\r\n} from \"@coreui/react\";\r\nimport { getProyectoById } from \"src/helpers/peticionesAPI\";\r\nimport \"./ProyectosGraficas.css\";\r\nimport ProyectosBasicas from \"./ProyectosBasicas\";\r\nimport ProyectosLandmarks from \"./ProyectosLandmarks\";\r\nimport ProyectosPeligrosidades from \"./ProyectosPeligrosidades\";\r\nimport ProyectosCustom from \"./ProyectosCustom\";\r\nimport iconoactivo from '../../../assets/icons/activo.svg';\r\nimport iconoinactivo from '../../../assets/icons/inactivo.svg';\r\nimport Loader from \"src/reusable/Loader\";\r\n\r\nconst ProyectosLayout = ({\r\n  match: {\r\n    params: { idProyecto },\r\n  }\r\n}) => {\r\n\r\n  const [informacion, setInformacion] = useState({\r\n    nombre: \"\",\r\n    descripcion: \"\",\r\n    tipo: \"\",\r\n    estado:\"inactivo\",\r\n    icono:iconoinactivo\r\n  });\r\n  const [cargando, setCargando] = useState(true);\r\n  const token = localStorage.getItem(\"token\");\r\n  const id = idProyecto;\r\n\r\n  const getValor = async ()=>{\r\n    const {      \r\n      nombre,\r\n      estado,\r\n      tipo,\r\n      descripcion,\r\n    } = await getProyectoById(token, id);\r\n    const icono = (estado==\"activo\")?iconoactivo:iconoinactivo;      \r\n    const estadoformato = estado[0].toUpperCase() + estado.substring(1);\r\n    setInformacion({\r\n      nombre,\r\n      descripcion,\r\n      tipo,\r\n      estado:estadoformato,\r\n      icono\r\n    });\r\n  }\r\n  const getIntervalo = ()=>{\r\n    return setInterval(getValor,30000);\r\n  }\r\n\r\n  useEffect(async () => {\r\n    setCargando(true);    \r\n    await getValor();\r\n    const intervalo = getIntervalo();\r\n    setCargando(false);    \r\n    return () => clearInterval(intervalo); \r\n  }, []);\r\n  if (cargando)\r\n    return (\r\n      <div style={{ display: \"grid\", placeItems: \"center\", height: \"40vh\" }}>\r\n        <Loader height=\"10vh\" />\r\n      </div>\r\n    );\r\n  return (\r\n    <CContainer fluid>\r\n      <CRow>\r\n        <CCol sm=\"12\">\r\n          <CCard className=\"shadow\">\r\n            <CCardBody>\r\n              <CRow className=\"justify-content-between\">\r\n                <CCol className=\"col-3 d-flex align-items-center\">\r\n                  <img src={informacion.icono} className=\"icono\"/>\r\n                  <h4 className=\"ml-2\">{informacion.estado}</h4>\r\n                </CCol>\r\n                <CCol className=\"col-9 text-right\">\r\n                  <h5>Proyecto</h5>\r\n                  <h3>{`${informacion.nombre}`}</h3>\r\n                </CCol>\r\n              </CRow>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n      <CRow>\r\n        <CCol>\r\n          <CCard className=\"shadow\">\r\n            <CCardHeader className=\"contenedor-cabecera-principal\">\r\n              General\r\n            </CCardHeader>\r\n            <CCardBody>\r\n              <CListGroup accent>\r\n                <CRow>\r\n                  <CCol sm=\"4\">\r\n                    <CListGroupItem accent=\"info\">Descripción :</CListGroupItem>\r\n                  </CCol>\r\n                  <CCol sm=\"4\" className=\"align-self-center\">\r\n                    {informacion.descripcion}\r\n                  </CCol>\r\n                </CRow>\r\n                <CRow>\r\n                  <CCol sm=\"4\">\r\n                    <CListGroupItem accent=\"info\">Tipo :</CListGroupItem>\r\n                  </CCol>\r\n                  <CCol sm=\"4\" className=\"align-self-center\">\r\n                    {informacion.tipo}\r\n                  </CCol>\r\n                </CRow>\r\n              </CListGroup>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>      \r\n      <CRow>\r\n        <CCol sm=\"12\">\r\n          <CCard className=\"shadow\">\r\n            <CCardHeader className=\"contenedor-cabecera-principal\">\r\n              <h4>\r\n                <i className=\"far fa-chart-bar\"></i> <span> Graficas </span>\r\n              </h4>\r\n            </CCardHeader>\r\n            <CCardBody>\r\n              <CTabs activeTab=\"custom\">\r\n                <CNav variant=\"tabs\">\r\n                  <CNavItem>\r\n                    <CNavLink data-tab=\"custom\">Custom</CNavLink>\r\n                  </CNavItem>\r\n                  <CNavItem>\r\n                    <CNavLink data-tab=\"basica\">Basica</CNavLink>\r\n                  </CNavItem>\r\n                  <CNavItem>\r\n                    <CNavLink data-tab=\"nivel\">Nivel</CNavLink>\r\n                  </CNavItem>\r\n                  <CNavItem>\r\n                    <CNavLink data-tab=\"tendencia\">Tendencia</CNavLink>\r\n                  </CNavItem>\r\n                </CNav>\r\n                <CTabContent>\r\n                  <CTabPane data-tab=\"custom\">\r\n                    {\" \"}\r\n                    <div className=\"mt-4\">\r\n                      <ProyectosCustom idProyecto={id} />\r\n                    </div>{\" \"}\r\n                  </CTabPane>\r\n                  <CTabPane data-tab=\"basica\">\r\n                    {\" \"}\r\n                    <div className=\"mt-4\">\r\n                      <ProyectosBasicas idProyecto={id} />{\" \"}\r\n                    </div>\r\n                  </CTabPane>\r\n                  <CTabPane data-tab=\"nivel\">\r\n                    {\" \"}\r\n                    <div className=\"mt-4\">\r\n                      <ProyectosLandmarks idProyecto={id} />{\" \"}\r\n                    </div>\r\n                  </CTabPane>\r\n                  <CTabPane data-tab=\"tendencia\">\r\n                    {\" \"}\r\n                    <div className=\"mt-4\">\r\n                      <ProyectosPeligrosidades idProyecto={id} />\r\n                    </div>{\" \"}\r\n                  </CTabPane>\r\n                </CTabContent>\r\n              </CTabs>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n    </CContainer>\r\n  );\r\n};\r\n\r\nexport default ProyectosLayout;\r\n"],"sourceRoot":""}