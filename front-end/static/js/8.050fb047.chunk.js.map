{"version":3,"sources":["assets/icons/inactivo.svg","vistas/general/Navegacion.js","vistas/elementos/graficas_elementos/ElementosBasica.js","vistas/elementos/graficas_elementos/ElementosLandmark.js","vistas/elementos/graficas_elementos/ElementosPeligrosidad.js","vistas/elementos/graficas_elementos/ElementosGraficas.js","vistas/elementos/graficas_elementos/ElementosCustom.js","vistas/elementos/graficas_elementos/ElementosLandmarks.js","vistas/elementos/graficas_elementos/ElementosBasicas.js","vistas/elementos/graficas_elementos/ElementosPeligrosidades.js","vistas/elementos/graficas_elementos/ElementosLayout.js"],"names":["NavegacionTipo","TARJETA","ELEMENTO","PROYECTO","Navegacion","activo","tipo","history","direccion","servicios","useContext","ServicesContext","navegacion","useMemo","push","titulo","id","key","undefined","includes","className","variant","map","item","index","active","onClick","click","data","labels","values","arr_colors","etiquetas","hour","arr_values","length","forEach","label","slice","v","idx","alias","fill","backgroundColor","borderColor","datasets","options","scales","y","grace","plugins","zoom","pan","enabled","mode","wheel","pinch","onZoomComplete","chart","update","maintainAspectRatio","ElementosBasica","sensores","chartRef","useRef","graficasDatos","store","getState","arr_clean","useState","setLabels","accordion","setAccordion","setValues","ultimoDato","oldData","newData","corto","useEffect","Chart","register","arr_dates","matrix_val","sensor","fecha","arr","i","valor","inicializar","old","style","minHeight","maxHeight","ref","current","resetZoom","block","nombre","show","toFixed","ElementosLandmark","landmark","nivel","deltai","deltay","ElementosPeligrosidad","peligrosidad","ElementosGraficas","graficaActiva","custom","setCustom","sm","xs","datos","name","value","onChange","e","target","valores","ElementosCustom","idElemento","graficasElementosInfo","setGraficasElementosInfo","cargando","setCargando","intervalo","token","localStorage","getItem","getData","a","getElementoById","variables","graficas","tarjeta","substr","getRecursosAPI","lista_sensores","str_sensores","str_variables","variable","Promise","all","getPaquetesAPI","getLandmarksAPI","getPeligrosidadAPI","getElementosPaquetesApi","sensores_datos","sensores_landmark","sensores_peligrosidad","variables_datos","reverse","arr_graficas","grafica","arr_grafica","arr_variables","arr_sensores","direcciones","variable_index","find","parseInt","substring","estado","direccion_elemento","direccion_sensor","sensor_index","indexOf","sensor_info","clearInterval","setInterval","display","placeItems","height","Loader","md","ElementosLanmarks","direccionproyecto","getIntervalo","ElementosBasicas","useStore","console","log","ElementosPeligrosidades","ElementosLayout","match","params","identificador","descripcion","area","linea","proceso","icono","iconoinactivo","informacion","setInformacion","GetData","iconoactivo","estadoformato","toUpperCase","fluid","src","accent","activeTab"],"mappings":"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","file":"static/js/8.050fb047.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/inactivo.c25580cd.svg\";","import React, { useContext, useMemo} from \"react\";\r\nimport { CCard, CCol, CRow, CNav, CNavItem, CNavLink } from \"@coreui/react\";\r\nimport { ServicesContext } from \"src/containers/UserContext\";\r\nimport propTypes from \"prop-types\";\r\nimport \"./Navegacion.css\";\r\n\r\nconst NavegacionTipo = {\r\n  TARJETA : 0,\r\n  ELEMENTO : 1,\r\n  PROYECTO : 2 \r\n}\r\nconst Navegacion = ({activo = 0,tipo = NavegacionTipo.ELEMENTO, history, direccion}) => {\r\n\r\n  const servicios = useContext(ServicesContext);\r\n  const navegacion = useMemo(() =>{\r\n    const navegacion = [];\r\n    switch(tipo) {\r\n      case NavegacionTipo.TARJETA:\r\n        navegacion.push({titulo:\"Información\",id:0,direccion:\"informacion\",key:\"tinformacion\"});\r\n        if(servicios!=undefined){\r\n          if(servicios.includes(\"TC\"))\r\n            navegacion.push({titulo:\"Configuración\",id:1,direccion:\"configuracion\",key:\"tconfiguracion\"});\r\n          if(servicios.includes(\"TGI\") || servicios.includes(\"TGII\"))\r\n            navegacion.push({titulo:\"Graficas\",id:2,direccion:\"graficas\",key:\"tgraficas\"});\r\n          if(servicios.includes(\"TE\"))\r\n            navegacion.push({titulo:\"Estadistica\",id:3,direccion:\"estadistica\",key:\"testadistica\"});\r\n        }        \r\n        break;        \r\n      case NavegacionTipo.ELEMENTO:\r\n        navegacion.push({titulo:\"Información\",id:0,direccion:\"informacion\",key:\"einformacion\"});\r\n        if(servicios!=undefined){\r\n          if(servicios.includes(\"EC\"))\r\n            navegacion.push({titulo:\"Configuración\",id:1,direccion:\"configuracion\",key:\"econfiguracion\"});\r\n          if(servicios.includes(\"EGI\") || servicios.includes(\"EGII\"))\r\n            navegacion.push({titulo:\"Graficas\",id:2, direccion:\"graficas\",key:\"egraficas\"});\r\n          if(servicios.includes(\"EE\"))\r\n            navegacion.push({titulo:\"Estadistica\",id:3,direccion:\"estadistica\",key:\"3estadistica\"});\r\n        }        \r\n        break;\r\n      case NavegacionTipo.PROYECTO:\r\n        if(servicios!=undefined){\r\n          if(servicios.includes(\"EGI\") || servicios.includes(\"EGII\"))\r\n            navegacion.push({titulo:\"Información\",id:0,direccion:\"informacion\",key:\"pinformacion\"});\r\n          if(servicios.includes(\"EC\"))\r\n            navegacion.push({titulo:\"Configuración\",id:1,direccion:\"configuracion\",key:\"pconfiguracion\"});\r\n          if(servicios.includes(\"EE\"))\r\n            navegacion.push({titulo:\"Estadistica\",id:2,direccion:\"estadistica\",key:\"pestadistica\"});\r\n          navegacion.push({titulo:\"Elementos\",id:3,direccion:\"elementos\",key:\"pelementos\"});\r\n        }\r\n        break;        \r\n    } \r\n    return navegacion;\r\n  },[servicios,tipo]);\r\n  \r\n  const click = (index) => {\r\n    \r\n    switch(tipo) {\r\n      case NavegacionTipo.TARJETA:\r\n        history.push(`/tarjetas/${direccion}/${navegacion[index].direccion}`);           \r\n        break;        \r\n      case NavegacionTipo.ELEMENTO:\r\n        history.push(`/elementos/${direccion}/${navegacion[index].direccion}`);         \r\n       break;\r\n      case NavegacionTipo.PROYECTO:\r\n        history.push(`/proyectos/${direccion}/${navegacion[index].direccion}`);         \r\n        break;\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CCard className=\"navegacion py-1\">                                                          \r\n        <div className=\"panel d-flex justify-content-end\">\r\n          <CNav variant=\"tabs\">\r\n            {navegacion.map((item,index) => {\r\n              return (\r\n                <CNavItem key={item.key}>\r\n                  {\r\n                    (item.id==activo)?\r\n                    <CNavLink className=\"link\" active>{item.titulo}</CNavLink>\r\n                    :\r\n                    <CNavLink className=\"link\" onClick={()=>click(index)}>{item.titulo}</CNavLink>\r\n                  }        \r\n                </CNavItem>\r\n              );\r\n            })}  \r\n          </CNav>            \r\n        </div>                  \r\n      </CCard>\r\n    </>\r\n  );\r\n};\r\n\r\nNavegacion.propTypes = {\r\n  activo: propTypes.number,\r\n  tipo: propTypes.oneOf([0,1,2]),\r\n  direccion: propTypes.string,\r\n  history: propTypes.object\r\n};\r\n\r\nexport {NavegacionTipo};\r\nexport default Navegacion;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCollapse,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n} from \"@coreui/react\";\r\nimport { Chart, Line } from \"react-chartjs-2\";\r\nimport \"./ElementosGraficas.css\";\r\nimport zoom from \"chartjs-plugin-zoom\";\r\nimport store from \"src/store\";\r\n\r\nconst data = (labels, values, arr_colors, etiquetas) => {\r\n  let hour = [];\r\n  let arr_values = [];\r\n  if (labels.length > 1) {\r\n    labels.forEach((label) => {\r\n      //FIXME: Si la label no existe dar un -\r\n      if (label == undefined) hour.push(\"-\");\r\n      else hour.push(label.slice(11, label.length));\r\n    });\r\n  }\r\n  values.forEach((v, idx) => {\r\n    arr_values.push({\r\n      label: `${etiquetas[idx].alias}`,\r\n      data: v,\r\n      fill: false,\r\n      backgroundColor: `rgb(${arr_colors[idx]})`,\r\n      borderColor: `rgb(${arr_colors[idx]}, 0.2)`,\r\n    });\r\n  });\r\n\r\n  return {\r\n    labels: hour,\r\n    datasets: arr_values,\r\n  };\r\n};\r\n\r\nconst options = {\r\n  scales: {\r\n    y: {\r\n      grace: \"0.25%\",\r\n    },\r\n  },\r\n  plugins: {\r\n    zoom: {\r\n      pan: {\r\n        enabled: true,\r\n        mode: \"xy\",\r\n      },\r\n      zoom: {\r\n        wheel: {\r\n          enabled: true,\r\n        },\r\n        pinch: {\r\n          enabled: true,\r\n        },\r\n        mode: \"xy\",\r\n        onZoomComplete({ chart }) {\r\n          chart.update(\"none\");\r\n        },\r\n      },\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n};\r\n\r\nconst arr_colors = [\"81,205,160\", \"109,120,173\", \"224,125,117\"];\r\n\r\nconst ElementosBasica = ({ sensores }) => {\r\n  const chartRef = useRef(null);\r\n  const { graficasDatos } = store.getState();\r\n  const arr_clean = sensores[0].map(() => {\r\n    return [];\r\n  });\r\n  const [labels, setLabels] = useState([]);\r\n  const [accordion, setAccordion] = useState();\r\n  const [values, setValues] = useState(arr_clean);\r\n\r\n  const ultimoDato = (oldData, newData) => {\r\n    if (oldData.length < graficasDatos.corto) return [...oldData, newData];\r\n    else\r\n      return [\r\n        ...oldData.slice(\r\n          oldData.length - (graficasDatos.corto - 1),\r\n          oldData.length\r\n        ),\r\n        newData,\r\n      ];\r\n  };\r\n  const inicializar = () => {\r\n    let arr_dates = [];\r\n    let matrix_val = [...arr_clean];\r\n    sensores.forEach((sensor) => {\r\n      arr_dates.push(sensor[0].fecha);\r\n      let arr = [];\r\n      for (let i = 0; i < sensor.length; i++) {\r\n        arr.push(ultimoDato(matrix_val[i], sensor[i].valor));\r\n      }\r\n      matrix_val = [...arr];\r\n    });\r\n    setValues(matrix_val);\r\n    setLabels(arr_dates);\r\n  };\r\n  const actualizar = () => {\r\n    setLabels((old) => {\r\n      return ultimoDato(old, sensores[0][0].fecha);\r\n    });\r\n    setValues((old) => {\r\n      let arr = [];\r\n      for (let i = 0; i < sensores[0].length; i++) {\r\n        arr.push(ultimoDato(old[i], sensores[0][i].valor));\r\n      }\r\n      return arr;\r\n    });\r\n  };\r\n\r\n  const resetZoom = () => {\r\n    chartRef.current.resetZoom();\r\n  };\r\n\r\n  useEffect(() => {\r\n    Chart.register(zoom);\r\n    if (sensores.length > 1) inicializar();\r\n    else if (sensores.length == 1) actualizar();\r\n  }, [sensores]);\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container-fluid\"\r\n        style={{ minHeight: \"40vh\", maxHeight: \"50vh\" }}\r\n      >\r\n        <Line\r\n          data={data(labels, values, arr_colors, sensores[0])}\r\n          options={options}\r\n          ref={chartRef}\r\n        />\r\n        <CButton className=\"boton-reset\" onClick={resetZoom}>\r\n          Restablecer Zoom\r\n        </CButton>\r\n      </div>\r\n      <div className=\"mt-5\">\r\n        {sensores[0].map((sensor, idx) => {\r\n          return (\r\n            <div id=\"accordion\" key={idx}>\r\n              <CCard className=\"mb-0\">\r\n                <CCardHeader className=\"contenedor-cabecera\">\r\n                  <CButton\r\n                    block\r\n                    className=\"text-left m-0 p-0 \"\r\n                    onClick={() => setAccordion(accordion === idx ? null : idx)}\r\n                  >\r\n                    <h5 className=\"m-0 p-0\">\r\n                      <span className=\"text-color\">\r\n                        {sensor.tipo} - {sensor.nombre} ({sensor.alias})\r\n                      </span>\r\n                    </h5>\r\n                  </CButton>\r\n                </CCardHeader>\r\n                <CCollapse show={accordion === idx}>\r\n                  <CCardBody>\r\n                    <pre>\r\n                      <h6>Fecha : {labels[labels.length - 1]} </h6>\r\n                    </pre>\r\n                    <pre>\r\n                      <h6>\r\n                        Valor (actual) :{\" \"}\r\n                        {values[idx][values[idx].length - 1] != undefined\r\n                          ? values[idx][values[idx].length - 1].toFixed(4)\r\n                          : 0}\r\n                      </h6>\r\n                    </pre>\r\n                  </CCardBody>\r\n                </CCollapse>\r\n              </CCard>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ElementosBasica;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Chart, Line } from \"react-chartjs-2\";\r\nimport {\r\n  CButton,\r\n  CCollapse,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n} from \"@coreui/react\";\r\nimport \"./ElementosGraficas.css\";\r\nimport zoom from \"chartjs-plugin-zoom\";\r\nimport store from \"src/store\";\r\n\r\nconst data = (labels, values, arr_colors, etiquetas) => {\r\n  let hour = [];\r\n  let arr_values = [];\r\n  if (labels.length > 1) {\r\n    labels.forEach((label) => {\r\n      if(label)\r\n        hour.push(label.slice(11, label.length));\r\n    });\r\n  }\r\n  values.forEach((v, idx) => {\r\n    arr_values.push({\r\n      label: `${etiquetas[idx].alias}`,\r\n      data: v,\r\n      fill: false,\r\n      backgroundColor: `rgb(${arr_colors[idx]})`,\r\n      borderColor: `rgb(${arr_colors[idx]}, 0.2)`,\r\n    });\r\n  });\r\n\r\n  return {\r\n    labels: hour,\r\n    datasets: arr_values,\r\n  };\r\n};\r\n\r\nconst options = {\r\n  scales: {\r\n    y: {\r\n      grace: \"0.25%\",\r\n    },\r\n  },\r\n  plugins: {\r\n    zoom: {\r\n      pan: {\r\n        enabled: true,\r\n        mode: \"xy\",\r\n      },\r\n      zoom: {\r\n        wheel: {\r\n          enabled: true,\r\n        },\r\n        pinch: {\r\n          enabled: true,\r\n        },\r\n        mode: \"xy\",\r\n        onZoomComplete({ chart }) {\r\n          chart.update(\"none\");\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst arr_colors = [\"81,205,160\", \"109,120,173\", \"224,125,117\"];\r\n\r\nconst ElementosLandmark = ({ sensores }) => {\r\n  const chartRef = useRef(null);\r\n  const { graficasDatos } = store.getState();\r\n  const arr_clean = sensores[0].map(() => {\r\n    return [];\r\n  });\r\n  const [accordion, setAccordion] = useState();\r\n  const [labels, setLabels] = useState([]);\r\n  const [values, setValues] = useState(arr_clean);\r\n\r\n  const ultimoDato = (oldData, newData) => {\r\n    if (oldData.length < graficasDatos.corto) return [...oldData, newData];\r\n    else\r\n      return [\r\n        ...oldData.slice(\r\n          oldData.length - (graficasDatos.corto - 1),\r\n          oldData.length\r\n        ),\r\n        newData,\r\n      ];\r\n  };\r\n\r\n  const inicializar = () => {\r\n    let arr_dates = [];\r\n    let matrix_val = [...arr_clean];\r\n    sensores.forEach((sensor) => {\r\n      arr_dates.push(sensor[0].fecha);\r\n      let arr = [];\r\n      for (let i = 0; i < sensor.length; i++) {\r\n        arr.push(ultimoDato(matrix_val[i], sensor[i].landmark?.nivel[1]));\r\n      }\r\n      matrix_val = [...arr];\r\n    });\r\n    setValues(matrix_val);\r\n    setLabels(arr_dates);\r\n  };\r\n\r\n  const actualizar = () => {\r\n    setLabels((old) => {\r\n      return ultimoDato(old, sensores[0][0].fecha);\r\n    });\r\n    setValues((old) => {\r\n      let arr = [];\r\n      for (let i = 0; i < sensores[0].length; i++) {\r\n        arr.push(ultimoDato(old[i], sensores[0][i].landmark.nivel[1]));\r\n      }\r\n      return arr;\r\n    });\r\n  };\r\n\r\n  const resetZoom = () => {\r\n    chartRef.current.resetZoom();\r\n  };\r\n\r\n  useEffect(() => {\r\n    Chart.register(zoom);\r\n    if (sensores.length > 1) inicializar();\r\n    else if (sensores.length == 1) actualizar();\r\n  }, [sensores]);\r\n\r\n  return (\r\n    <>\r\n      <Line\r\n        data={data(labels, values, arr_colors, sensores[0])}\r\n        options={options}\r\n        ref={chartRef}\r\n      />\r\n      <CButton className=\"boton-reset\" onClick={resetZoom}>\r\n        Restablecer Zoom\r\n      </CButton>\r\n      <div className=\"mt-4\">\r\n        {sensores[0].map((sensor, idx) => {\r\n          return (\r\n            <div id=\"accordion\" key={idx}>\r\n              <CCard className=\"mb-0 shadow\">\r\n                <CCardHeader className=\"contenedor-cabecera\">\r\n                  <CButton\r\n                    block\r\n                    className=\"text-left m-0 p-0 \"\r\n                    onClick={() => setAccordion(accordion === idx ? null : idx)}\r\n                  >\r\n                    <h5 className=\"m-0 p-0\">\r\n                      <span className=\"text-color\">\r\n                        {sensor.tipo} - {sensor.nombre} ({sensor.alias})\r\n                      </span>\r\n                    </h5>\r\n                  </CButton>\r\n                </CCardHeader>\r\n                <CCollapse show={accordion === idx}>\r\n                  <CCardBody>\r\n                    <pre>\r\n                      <h6>Fecha : {sensor.fecha} </h6>\r\n                    </pre>\r\n                    <pre>\r\n                      <h6>\r\n                        Valor (actual) :\r\n                        {sensor.landmark?.nivel[1]\r\n                          ? sensor.landmark.nivel[1].toFixed(4)\r\n                          : \"-\"}\r\n                      </h6>\r\n                    </pre>\r\n                    <pre>\r\n                      <h6>\r\n                        Cambio t :\r\n                        {sensor.landmark?.deltai\r\n                          ? (sensor.landmark.deltai / 2).toFixed(4)\r\n                          : \"-\"}\r\n                        min\r\n                      </h6>\r\n                    </pre>\r\n                    <pre>\r\n                      <h6>\r\n                        Cambio f(t) :\r\n                        {sensor.landmark?.deltay\r\n                          ? sensor.landmark.deltay.toFixed(4)\r\n                          : \"-\"}\r\n                      </h6>\r\n                    </pre>\r\n                  </CCardBody>\r\n                </CCollapse>\r\n              </CCard>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ElementosLandmark;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Chart, Line } from \"react-chartjs-2\";\r\nimport {\r\n  CButton,\r\n  CCollapse,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n} from \"@coreui/react\";\r\nimport \"./ElementosGraficas.css\";\r\nimport zoom from \"chartjs-plugin-zoom\";\r\nimport store from \"src/store\";\r\n\r\nconst data = (labels, values, arr_colors, etiquetas) => {\r\n  let hour = [];\r\n  let arr_values = [];\r\n  if (labels.length > 1) {\r\n    labels.forEach((label) => {\r\n      if(label)\r\n        hour.push(label.slice(11, label.length));\r\n    });\r\n  }\r\n  values.forEach((v, idx) => {\r\n    arr_values.push({\r\n      label: `${etiquetas[idx].alias}`,\r\n      data: v,\r\n      fill: false,\r\n      backgroundColor: `rgb(${arr_colors[idx]})`,\r\n      borderColor: `rgb(${arr_colors[idx]}, 0.2)`,\r\n    });\r\n  });\r\n\r\n  return {\r\n    labels: hour,\r\n    datasets: arr_values,\r\n  };\r\n};\r\n\r\nconst options = {\r\n  scales: {\r\n    y: {\r\n      grace: \"0.25%\",\r\n    },\r\n  },\r\n  plugins: {\r\n    zoom: {\r\n      pan: {\r\n        enabled: true,\r\n        mode: \"xy\",\r\n      },\r\n      zoom: {\r\n        wheel: {\r\n          enabled: true,\r\n        },\r\n        pinch: {\r\n          enabled: true,\r\n        },\r\n        mode: \"xy\",\r\n        onZoomComplete({ chart }) {\r\n          chart.update(\"none\");\r\n        },\r\n      },\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n};\r\nconst arr_colors = [\"81,205,160\", \"109,120,173\", \"224,125,117\"];\r\n\r\nconst ElementosPeligrosidad = ({ sensores }) => {\r\n  const chartRef = useRef(null);\r\n  const arr_clean = sensores[0].map(() => {\r\n    return [];\r\n  });\r\n  const { graficasDatos } = store.getState();\r\n  const [accordion, setAccordion] = useState();\r\n  const [labels, setLabels] = useState([]);\r\n  const [values, setValues] = useState(arr_clean);\r\n\r\n  const ultimoDato = (oldData, newData) => {\r\n    if (oldData.length < graficasDatos.corto) return [...oldData, newData];\r\n    else\r\n      return [\r\n        ...oldData.slice(\r\n          oldData.length - (graficasDatos.corto - 1),\r\n          oldData.length\r\n        ),\r\n        newData,\r\n      ];\r\n  };\r\n\r\n  const inicializar = () => {\r\n    let arr_dates = [];\r\n    let matrix_val = [...arr_clean];\r\n    sensores.forEach((sensor) => {\r\n      // console.log(sensor)\r\n      arr_dates.push(sensor[0].fecha);\r\n      let arr = [];\r\n      for (let i = 0; i < sensor.length; i++) {\r\n        arr.push(\r\n          ultimoDato(matrix_val[i], sensor[i].peligrosidad?.peligrosidad[1])\r\n        );\r\n      }\r\n      matrix_val = [...arr];\r\n    });\r\n    setValues(matrix_val);\r\n    setLabels(arr_dates);\r\n  };\r\n  const actualizar = () => {\r\n    setLabels((old) => {\r\n      return ultimoDato(old, sensores[0][0].fecha);\r\n    });\r\n    setValues((old) => {\r\n      let arr = [];\r\n      for (let i = 0; i < sensores[0].length; i++) {\r\n        arr.push(\r\n          ultimoDato(old[i], sensores[0][i].peligrosidad.peligrosidad[1])\r\n        );\r\n      }\r\n      return arr;\r\n    });\r\n  };\r\n\r\n  const resetZoom = () => {\r\n    chartRef.current.resetZoom();\r\n  };\r\n\r\n  useEffect(() => {\r\n    Chart.register(zoom);\r\n    if (sensores.length > 1) inicializar();\r\n    else if (sensores.length == 1) actualizar();\r\n  }, [sensores]);\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container-fluid\"\r\n        style={{ minHeight: \"40vh\", maxHeight: \"50vh\" }}\r\n      >\r\n        <Line\r\n          data={data(labels, values, arr_colors, sensores[0])}\r\n          options={options}\r\n          ref={chartRef}\r\n        />\r\n        <CButton className=\"boton-reset\" onClick={resetZoom}>\r\n          Restablecer Zoom\r\n        </CButton>\r\n      </div>\r\n      <div className=\"mt-5\">\r\n        {sensores[0].map((sensor, idx) => {\r\n          return (\r\n            <div id=\"accordion\" key={idx}>\r\n              <CCard className=\"mb-0 shadow\">\r\n                <CCardHeader className=\"contenedor-cabecera\">\r\n                  <CButton\r\n                    block\r\n                    className=\"text-left m-0 p-0 \"\r\n                    onClick={() => setAccordion(accordion === idx ? null : idx)}\r\n                  >\r\n                    <h5 className=\"m-0 p-0\">\r\n                      <span className=\"text-color\">\r\n                        {sensor.tipo} - {sensor.nombre} ({sensor.alias})\r\n                      </span>\r\n                    </h5>\r\n                  </CButton>\r\n                </CCardHeader>\r\n                <CCollapse show={accordion === idx}>\r\n                  <CCardBody>\r\n                    <pre>\r\n                      <h6>Fecha : {sensor.fecha} </h6>\r\n                    </pre>\r\n                    <pre>\r\n                      <h6>\r\n                        Tendencia (sostenida) :{\" \"}\r\n                        {sensor.peligrosidad?.peligrosidad[0].toFixed(4) || '-'}\r\n                      </h6>\r\n                    </pre>\r\n                    <pre>\r\n                      <h6>\r\n                        Peligro (actual) :{\" \"}\r\n                        {sensor.peligrosidad?.peligrosidad[1].toFixed(4) || '-'}\r\n                      </h6>\r\n                    </pre>\r\n                    <pre>\r\n                      <h6>\r\n                        Cambio f(t) (sostenido) :{\" \"}\r\n                        {sensor.peligrosidad?.deltay[1].toFixed(4) || '-'}\r\n                      </h6>\r\n                    </pre>\r\n                    <pre>\r\n                      <h6>\r\n                        Cambio f(t) (actual) :{\" \"}\r\n                        {sensor.peligrosidad?.deltay[1].toFixed(4) || '-'}\r\n                      </h6>\r\n                    </pre>\r\n                  </CCardBody>\r\n                </CCollapse>\r\n              </CCard>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ElementosPeligrosidad;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CSelect,\r\n  CRow,\r\n  CCol,\r\n} from \"@coreui/react\";\r\n\r\nimport ElementosBasica from \"./ElementosBasica\";\r\nimport ElementosLandmark from \"./ElementosLandmark\";\r\nimport ElementosPeligrosidad from \"./ElementosPeligrosidad\";\r\nimport \"./ElementosGraficas.css\";\r\n\r\nconst ElementosGraficas = ({ graficaActiva, idx }) => {\r\n  const [custom, setCustom] = useState(\"Basica\");\r\n\r\n  const handleChange = (e) => {\r\n    setCustom(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <CCard className=\"shadow\" key={idx}>\r\n      <CCardHeader className=\"contenedor-cabecera\">\r\n        <CRow className=\"justify-content-between align-items-center\">\r\n          <CCol sm=\"6\" className=\"my-2\">\r\n            <h5 className=\"m-0\">{graficaActiva.nombre}</h5>\r\n          </CCol>\r\n          <CCol sm=\"6\" className=\"my-2\">\r\n            <CCol xs=\"12\">\r\n              {graficaActiva.datos.tipo === \"sensores\" ? (\r\n                <CSelect\r\n                  custom\r\n                  name=\"select\"\r\n                  id=\"select\"\r\n                  value={custom}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"Basica\">Basica</option>\r\n                  <option value=\"Nivel\">Nivel</option>\r\n                  <option value=\"Tendencia\">Tendencia</option>\r\n                </CSelect>\r\n              ) : null}\r\n            </CCol>\r\n          </CCol>\r\n        </CRow>\r\n      </CCardHeader>\r\n      <CCardBody>\r\n        <div className={custom === \"Basica\" ? \"\" : \"ocultar\"}>\r\n          <ElementosBasica sensores={graficaActiva.datos.valores} />\r\n        </div>\r\n        {graficaActiva.datos.tipo === \"sensores\" ? (\r\n          <>\r\n            <div className={custom === \"Nivel\" ? \"\" : \"ocultar\"}>\r\n              <ElementosLandmark sensores={graficaActiva.datos.valores} />\r\n            </div>\r\n            <div className={custom === \"Tendencia\" ? \"\" : \"ocultar\"}>\r\n              <ElementosPeligrosidad sensores={graficaActiva.datos.valores} />\r\n            </div>\r\n          </>\r\n        ) : null}\r\n      </CCardBody>\r\n    </CCard>\r\n  );\r\n};\r\n\r\nexport default ElementosGraficas;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { CRow, CCol } from \"@coreui/react\";\r\nimport {\r\n  getElementoById,\r\n  getElementosPaquetesApi,\r\n  getLandmarksAPI,\r\n  getPaquetesAPI,\r\n  getPeligrosidadAPI,\r\n  getRecursosAPI,\r\n} from \"src/helpers/peticionesAPI\";\r\nimport ElementosGraficas from \"./ElementosGraficas\";\r\nimport \"./ElementosGraficas.css\";\r\nimport Loader from \"src/reusable/Loader\";\r\nimport store from \"src/store\";\r\n\r\nconst ElementosCustom = ({ idElemento }) => {\r\n  \r\n  const {graficasDatos} = store.getState();  \r\n  const [graficasElementosInfo, setGraficasElementosInfo] = useState([]);\r\n  const [cargando, setCargando] = useState(false)\r\n  const intervalo = useRef(null);\r\n  const token = localStorage.getItem(\"token\");\r\n  const id = idElemento;\r\n\r\n  const getData = async () => {\r\n    const { sensores, variables, graficas } = await getElementoById(token, id);\r\n    let tarjeta = \"\";\r\n    if(sensores.length > 0)\r\n      tarjeta = sensores[0].direccion.substr(0,5);  \r\n    const { sensores: lista_sensores } = await getRecursosAPI(tarjeta, token);\r\n\r\n    let str_sensores = [];\r\n    let str_variables = [];\r\n    variables.forEach((variable) => {\r\n      str_variables.push(`${id}.V${variable.index}`);\r\n    });\r\n    sensores.forEach((sensor) => {\r\n      str_sensores.push(`${sensor.direccion}`);\r\n    });\r\n    let [{ sensores: sensores_datos },\r\n         { sensores: sensores_landmark },\r\n         { sensores: sensores_peligrosidad },\r\n         { variables: variables_datos }] = await Promise.all([\r\n          getPaquetesAPI(\r\n            str_sensores,\r\n            token,\r\n            graficasDatos.corto\r\n          ),\r\n          getLandmarksAPI(\r\n            str_sensores,\r\n            token,\r\n            graficasDatos.corto\r\n          ),\r\n          getPeligrosidadAPI(\r\n            str_sensores,\r\n            token,\r\n            graficasDatos.corto\r\n          ),\r\n          getElementosPaquetesApi(\r\n            str_variables,\r\n            token,\r\n            graficasDatos.corto\r\n          )]\r\n    );\r\n\r\n    sensores_datos = sensores_datos.reverse();\r\n    sensores_landmark = sensores_landmark.reverse();\r\n    sensores_peligrosidad = sensores_peligrosidad.reverse();\r\n    variables_datos = variables_datos.reverse();\r\n\r\n    let arr_graficas = [];\r\n    graficas.forEach((grafica) => {\r\n      let arr_grafica = [];\r\n      for (let i = 0; i < variables_datos.length; i++) {\r\n        let arr_variables = [];\r\n        let arr_sensores = [];\r\n        grafica.direcciones.forEach((direccion) => {\r\n          if (direccion[0] === \"V\") {\r\n            const variable_index = variables.find(\r\n              (variable) => variable.index === parseInt(direccion.substring(1))\r\n            );\r\n            if (variable_index.estado === \"activo\") {\r\n              arr_variables.push({\r\n                nombre: variable_index.nombre,\r\n                alias: variable_index.alias,\r\n                tipo: \"V\",\r\n                ...variables_datos[i][parseInt(variable_index.index)],\r\n              });\r\n            }\r\n          } else {\r\n            const direccion_elemento = parseInt(direccion.substring(1));\r\n            const direccion_sensor = sensores[direccion_elemento].direccion;\r\n            const sensor_index = direccion_sensor.substring(\r\n              direccion_sensor.indexOf(\".\") + 2\r\n            );\r\n            const sensor_info = lista_sensores.find(\r\n              (sensor) => sensor.index === parseInt(sensor_index)\r\n            );\r\n            if (sensor_info.estado === \"activo\") {\r\n              arr_sensores.push({\r\n                nombre: sensor_info.nombre,\r\n                alias: sensor_info.alias,\r\n                tipo: \"S\",\r\n                ...sensores_datos[i][direccion_elemento],\r\n                ...sensores_landmark[i][direccion_elemento],\r\n                ...sensores_peligrosidad[i][direccion_elemento]\r\n              });              \r\n            }\r\n          }\r\n        });\r\n        if (arr_variables.length > 0) {\r\n          arr_grafica.push(arr_variables);\r\n        }\r\n        if (arr_sensores.length > 0) {\r\n          arr_grafica.push(arr_sensores);\r\n        }\r\n      }\r\n      if (arr_grafica.length > 0) {\r\n        arr_graficas.push(\r\n          grafica.direcciones[0][0] === \"V\"\r\n            ? {\r\n                nombre: grafica.nombre,\r\n                datos: { tipo: \"variables\", valores: arr_grafica },\r\n              }\r\n            : {\r\n                nombre: grafica.nombre,\r\n                datos: { tipo: \"sensores\", valores: arr_grafica },\r\n              }\r\n        );\r\n      }\r\n    });\r\n\r\n    setGraficasElementosInfo(arr_graficas);\r\n  };\r\n  const getIntervalo = () => {\r\n    return setInterval(async () => {\r\n      const { sensores, variables, graficas } = await getElementoById(token, id);\r\n      let tarjeta = \"\";\r\n      if(sensores.length > 0)\r\n        tarjeta = sensores[0].direccion.substr(0,5);  \r\n      const { sensores: lista_sensores } = await getRecursosAPI(tarjeta, token);\r\n\r\n      let str_sensores = [];\r\n      let str_variables = [];\r\n      variables.forEach((variable) => {\r\n        str_variables.push(`${id}.V${variable.index}`);\r\n      });\r\n      sensores.forEach((sensor) => {\r\n        str_sensores.push(`${sensor.direccion}`);\r\n      });\r\n      let [{ sensores: sensores_datos },\r\n        { sensores: sensores_landmark },\r\n        { sensores: sensores_peligrosidad },\r\n        { variables: variables_datos }] = await Promise.all([\r\n         getPaquetesAPI(\r\n           str_sensores,\r\n           token,\r\n           1\r\n         ),\r\n         getLandmarksAPI(\r\n           str_sensores,\r\n           token,\r\n           1\r\n         ),\r\n         getPeligrosidadAPI(\r\n           str_sensores,\r\n           token,\r\n           1\r\n         ),\r\n         getElementosPaquetesApi(\r\n           str_variables,\r\n           token,\r\n           1\r\n         )]\r\n   );\r\n\r\n      let arr_graficas = [];\r\n      graficas.forEach((grafica) => {\r\n        let arr_grafica = [];\r\n        for (let i = 0; i < variables_datos.length; i++) {\r\n          let arr_variables = [];\r\n          let arr_sensores = [];\r\n          grafica.direcciones.forEach((direccion) => {\r\n            if (direccion[0] === \"V\") {\r\n              const variable_index = variables.find(\r\n                (variable) =>\r\n                  variable.index === parseInt(direccion.substring(1))\r\n              );\r\n              if (variable_index.estado === \"activo\") {\r\n                arr_variables.push({\r\n                  nombre: variable_index.nombre,\r\n                  alias: variable_index.alias,\r\n                  tipo: \"V\",\r\n                  ...variables_datos[i][parseInt(variable_index.index)],\r\n                });\r\n              }\r\n            }  \r\n            else {\r\n              const direccion_elemento = parseInt(direccion.substring(1));\r\n              const direccion_sensor = sensores[direccion_elemento].direccion;\r\n              const sensor_index = direccion_sensor.substring(\r\n                direccion_sensor.indexOf(\".\") + 2\r\n              );\r\n              const sensor_info = lista_sensores.find(\r\n                (sensor) => sensor.index === parseInt(sensor_index)\r\n              );\r\n              if (sensor_info.estado === \"activo\") {\r\n                arr_sensores.push({\r\n                  nombre: sensor_info.nombre,\r\n                  alias: sensor_info.alias,\r\n                  tipo: \"S\",\r\n                  ...sensores_datos[i][direccion_elemento],\r\n                  ...sensores_landmark[i][direccion_elemento],\r\n                  ...sensores_peligrosidad[i][direccion_elemento],\r\n                });\r\n              }\r\n            }\r\n          });\r\n          if (arr_variables.length > 0) {\r\n            arr_grafica.push(arr_variables);\r\n          }\r\n          if (arr_sensores.length > 0) {\r\n            arr_grafica.push(arr_sensores);\r\n          }\r\n        }\r\n        if (arr_grafica.length > 0) {\r\n          arr_graficas.push(\r\n            grafica.direcciones[0][0] === \"V\"\r\n              ? {\r\n                  nombre: grafica.nombre,\r\n                  datos: { tipo: \"variables\", valores: arr_grafica },\r\n                }\r\n              : {\r\n                  nombre: grafica.nombre,\r\n                  datos: { tipo: \"sensores\", valores: arr_grafica },\r\n                }\r\n          );\r\n        }\r\n      });\r\n      setGraficasElementosInfo(arr_graficas);\r\n    }, 30000);\r\n  };\r\n\r\n  useEffect(()=>{\r\n    return ()=>{            \r\n      if(intervalo.current!=null)\r\n        clearInterval(intervalo.current);\r\n    }\r\n  },[]);\r\n  useEffect(async () => {\r\n    setCargando(true);\r\n    if(intervalo.current!=null){\r\n      clearInterval(intervalo.current)      \r\n      intervalo.current = null;\r\n    }\r\n    await getData();\r\n    intervalo.current = getIntervalo();\r\n    setCargando(false);\r\n  }, [idElemento]);\r\n  \r\n\r\n  if (cargando)\r\n    return (\r\n      <div style={{ display: \"grid\", placeItems: \"center\", height: \"40vh\" }}>\r\n        <Loader height=\"10vh\" />\r\n      </div>\r\n    );\r\n  return (\r\n    <>\r\n      <CRow>\r\n        {graficasElementosInfo.map((grafica, idx) => {\r\n          return (\r\n            <CCol sm=\"12\" md=\"6\" key={idx}>\r\n                <ElementosGraficas graficaActiva={grafica} idx={idx}/>\r\n            </CCol>\r\n          );\r\n        })}\r\n      </CRow>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ElementosCustom;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { CCard, CCardBody, CCardHeader, CRow, CCol} from \"@coreui/react\";\r\nimport {\r\n  getElementoById,\r\n  getLandmarksAPI,\r\n  getRecursosAPI,\r\n} from \"src/helpers/peticionesAPI\";\r\nimport ElementosLandmark from \"./ElementosLandmark\";\r\nimport \"./ElementosGraficas.css\";\r\nimport Loader from \"src/reusable/Loader\";\r\nimport store from \"src/store\";\r\n\r\nconst ElementosLanmarks = ({idElemento}) => {\r\n    \r\n  const {graficasDatos} = store.getState();\r\n  const [graficasElementosInfo, setGraficasElementosInfo] = useState([]);\r\n  const [cargando, setCargando] = useState(true);\r\n  const intervalo = useRef(null)\r\n\r\n  const token = localStorage.getItem(\"token\");\r\n  const id = idElemento;\r\n\r\n  const getData = async () => {\r\n    const { sensores, graficas } = await getElementoById(token, id);\r\n    let tarjeta = \"\";\r\n      if(sensores.length > 0)\r\n        tarjeta = sensores[0].direccion.substr(0,5); \r\n    const { sensores: lista_sensores } = await getRecursosAPI(tarjeta, token);\r\n\r\n    let str_sensores = [];\r\n    sensores.forEach((sensor) => {\r\n      str_sensores.push(`${sensor.direccion}`);\r\n    });\r\n    let { sensores: sensores_datos } = await getLandmarksAPI(\r\n      str_sensores,\r\n      token,\r\n      graficasDatos.corto\r\n    );\r\n    sensores_datos = sensores_datos.reverse();\r\n\r\n    let arr_graficas = [];\r\n    let count_sensores = 0;\r\n    graficas.forEach((grafica) => {\r\n      let arr_grafica = [];\r\n      for (let i = 0; i < sensores_datos.length; i++) {\r\n        count_sensores = 0\r\n        let arr_sensores = [];\r\n        grafica.direcciones.forEach((direccion) => {\r\n          if (direccion[0] === \"S\") {\r\n            const direccionproyecto = parseInt(direccion.substring(1));\r\n            const direccion_sensor = sensores[direccionproyecto].direccion;\r\n            const sensor_index = direccion_sensor.slice(\r\n              direccion_sensor.indexOf(\".\") + 2,\r\n              direccion_sensor.length\r\n            );\r\n            const sensor_info = lista_sensores.find(\r\n              (sensor) => sensor.index === parseInt(sensor_index)\r\n            );\r\n            if (sensor_info.estado === \"activo\") {\r\n              arr_sensores.push({\r\n                nombre: sensor_info.nombre,\r\n                alias: sensor_info.alias,\r\n                tipo: \"S\",\r\n                ...sensores_datos[i][direccionproyecto],\r\n              });\r\n              count_sensores += 1\r\n            }\r\n          }\r\n        });\r\n        if (arr_sensores.length > 0) {\r\n          arr_grafica.push(arr_sensores);\r\n        }\r\n      }\r\n      if (arr_grafica.length > 0) {\r\n        arr_graficas.push({ nombre: grafica.nombre, datos: arr_grafica });\r\n      }\r\n    });\r\n    setGraficasElementosInfo(arr_graficas);\r\n  };\r\n  const getIntervalo = async () => {\r\n    setInterval(async () => {\r\n      const { sensores, graficas } = await getElementoById(token, id);\r\n      let tarjeta = \"\";\r\n      if(sensores.length > 0)\r\n        tarjeta = sensores[0].direccion.substr(0,5); \r\n      const { sensores: lista_sensores } = await getRecursosAPI(tarjeta, token);\r\n\r\n      let str_sensores = [];\r\n      sensores.forEach((sensor) => {\r\n        str_sensores.push(`${sensor.direccion}`);\r\n      });\r\n      let { sensores: sensores_datos } = await getLandmarksAPI(\r\n        str_sensores,\r\n        token,\r\n        1\r\n      );\r\n      sensores_datos = sensores_datos.reverse();\r\n\r\n      let arr_graficas = [];\r\n      graficas.forEach((grafica) => {\r\n        let arr_grafica = [];\r\n        for (let i = 0; i < sensores_datos.length; i++) {\r\n          let arr_sensores = [];          \r\n          grafica.direcciones.forEach((direccion) => {\r\n            if (direccion[0] === \"S\") {\r\n              const direccion_elemento = parseInt(direccion.substring(1));\r\n              const direccion_sensor = sensores[direccion_elemento].direccion;\r\n              const sensor_index = direccion_sensor.slice(\r\n                direccion_sensor.indexOf(\".\") + 2,\r\n                direccion_sensor.length\r\n              );\r\n              const sensor_info = lista_sensores.find(\r\n                (sensor) => sensor.index === parseInt(sensor_index)\r\n              );\r\n              if (sensor_info.estado === \"activo\") {\r\n                arr_sensores.push({\r\n                  nombre: sensor_info.nombre,\r\n                  alias: sensor_info.alias,\r\n                  tipo: \"S\",\r\n                  ...sensores_datos[i][direccion_elemento],\r\n                });                \r\n              }\r\n            }\r\n          });\r\n          if (arr_sensores.length > 0) {\r\n            arr_grafica.push(arr_sensores);\r\n          }\r\n        }\r\n        if (arr_grafica.length > 0) {\r\n          arr_graficas.push({ nombre: grafica.nombre, datos: arr_grafica });\r\n        }\r\n      });\r\n      setGraficasElementosInfo(arr_graficas);\r\n    }, 30000);\r\n  };\r\n\r\n  useEffect(()=>{\r\n    return ()=>{\r\n      if(intervalo.current!=null)\r\n        clearInterval(intervalo.current)\r\n    };\r\n  },[]);\r\n  useEffect(async () => {\r\n    if(intervalo.current!=null){\r\n        clearInterval(intervalo.current)\r\n        intervalo.current = null;\r\n    }\r\n    setCargando(true);\r\n    await getData();\r\n    intervalo.current = getIntervalo();\r\n    setCargando(false);\r\n  }, [idElemento]);\r\n\r\n  if (cargando)\r\n    return (\r\n      <div style={{ display: \"grid\", placeItems: \"center\", height: \"40vh\" }}>\r\n        <Loader height=\"10vh\" />\r\n      </div>\r\n    );\r\n  return (\r\n    <CRow>\r\n      {graficasElementosInfo.map((grafica, idx) => {\r\n        return (\r\n          <CCol sm=\"12\" md=\"6\" key={idx}>\r\n            <CCard className=\"shadow\">\r\n              <CCardHeader className=\"contenedor-cabecera\">\r\n                <h6 className=\"m-2\">{grafica.nombre}</h6>\r\n              </CCardHeader>\r\n              <CCardBody>\r\n                <ElementosLandmark sensores={grafica.datos} />\r\n              </CCardBody>\r\n            </CCard>\r\n          </CCol>          \r\n        );\r\n      })}\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default ElementosLanmarks;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport ElementosBasica from \"./ElementosBasica\";\r\nimport { CCard, CCardBody, CCardHeader, CRow, CCol} from \"@coreui/react\";\r\n\r\nimport {\r\n  getElementoById,\r\n  getElementosPaquetesApi,\r\n  getPaquetesAPI,\r\n  getRecursosAPI,\r\n} from \"src/helpers/peticionesAPI\";\r\n\r\nimport \"./ElementosGraficas.css\";\r\nimport Loader from \"src/reusable/Loader\";\r\nimport { useStore } from \"react-redux\";\r\n\r\nconst ElementosBasicas = ({ idElemento }) => {\r\n  \r\n  const {graficasDatos} = useStore().getState();\r\n  const [graficasElementosInfo, setGraficasElementosInfo] = useState([]);\r\n  const [cargando, setCargando] = useState(true);\r\n\r\n  const intervalo = useRef(null)\r\n  const token = localStorage.getItem(\"token\");\r\n  const id = idElemento;\r\n\r\n  const getData = async () => {\r\n    const { sensores, variables, graficas } = await getElementoById(token, id);\r\n    let tarjeta = \"\";\r\n    if(sensores.length > 0)\r\n      tarjeta = sensores[0].direccion.substr(0,5); \r\n    const { sensores: lista_sensores } = await getRecursosAPI(tarjeta, token);\r\n\r\n    let str_sensores = [];\r\n    let str_variables = [];\r\n    variables.forEach((variable) => {\r\n      str_variables.push(`${id}.V${variable.index}`);\r\n    });\r\n    sensores.forEach((sensor) => {\r\n      str_sensores.push(`${sensor.direccion}`);\r\n    });    \r\n\r\n    let [{ sensores: sensores_datos },\r\n         { variables: variables_datos }] = await Promise.all([\r\n      getPaquetesAPI(str_sensores,token,graficasDatos.corto),\r\n      getElementosPaquetesApi(str_variables,token,graficasDatos.corto)\r\n    ]);\r\n    console.log(variables_datos);    \r\n\r\n    variables_datos = variables_datos.reverse();\r\n    sensores_datos = sensores_datos.reverse();\r\n    \r\n    let arr_graficas = [];\r\n    graficas.forEach((grafica) => {\r\n      let arr_grafica = [];\r\n      for (let i = 0; i < variables_datos.length; i++) {\r\n        let arr_variables = [];\r\n        let arr_sensores = [];\r\n        grafica.direcciones.forEach((direccion) => {\r\n          if (direccion[0] === \"V\") {\r\n            const variable_index = variables.find(\r\n              (variable) => variable.index === parseInt(direccion.substring(1))\r\n            );\r\n            if (variable_index.estado === \"activo\") {\r\n              arr_variables.push({\r\n                nombre: variable_index.nombre,\r\n                alias: variable_index.alias,\r\n                tipo: \"V\",\r\n                ...variables_datos[i][parseInt(variable_index.index)],\r\n              });\r\n            }\r\n          } else {\r\n            const direccion_elemento = parseInt(direccion.substring(1));\r\n            const direccion_sensor = sensores[direccion_elemento].direccion;\r\n            const sensor_index = direccion_sensor.substring(\r\n              direccion_sensor.indexOf(\".\") + 2            \r\n            );\r\n            const sensor_info = lista_sensores.find(\r\n              (sensor) => sensor.index === parseInt(sensor_index)\r\n            );\r\n\r\n            if (sensor_info.estado === \"activo\") {              \r\n              arr_sensores.push({\r\n                nombre: sensor_info.nombre,\r\n                alias: sensor_info.alias,\r\n                tipo: \"S\",\r\n                ...sensores_datos[i][direccion_elemento],\r\n              });\r\n            }\r\n          }\r\n        });\r\n        if (arr_variables.length > 0) {\r\n          arr_grafica.push(arr_variables);\r\n        }\r\n        if (arr_sensores.length > 0) {\r\n          arr_grafica.push(arr_sensores);\r\n        }        \r\n      }\r\n      if (arr_grafica.length > 0) {\r\n        arr_graficas.push({ nombre: grafica.nombre, datos: arr_grafica });\r\n      }\r\n    });\r\n    setGraficasElementosInfo(arr_graficas);\r\n  };\r\n  const getIntervalo = ()=>{\r\n    return setInterval(async () => {\r\n      const { sensores, variables, graficas } = await getElementoById(token, id);\r\n      let tarjeta = \"\";\r\n      if(sensores.length > 0)\r\n        tarjeta = sensores[0].direccion.substr(0,5); \r\n      const { sensores: lista_sensores } = await getRecursosAPI(tarjeta, token);\r\n\r\n      let str_sensores = [];\r\n      let str_variables = [];\r\n      variables.forEach((variable) => {\r\n        str_variables.push(`${id}.V${variable.index}`);\r\n      });\r\n      sensores.forEach((sensor) => {\r\n        str_sensores.push(`${sensor.direccion}`);\r\n      });\r\n      let [ { sensores: sensores_datos },\r\n            { variables: variables_datos }] = await Promise.all([\r\n        getPaquetesAPI(str_sensores,token,1),\r\n        getElementosPaquetesApi(str_variables,token,1)\r\n      ]);  \r\n      \r\n      let arr_graficas = [];\r\n      graficas.forEach((grafica) => {\r\n        let arr_grafica = [];\r\n        for (let i = 0; i < variables_datos.length; i++) {\r\n          let arr_variables = [];\r\n          let arr_sensores = [];\r\n          grafica.direcciones.forEach((direccion) => {\r\n            if (direccion[0] === \"V\") {\r\n              const variable_index = variables.find(\r\n                (variable) =>\r\n                  variable.index === parseInt(direccion.substring(1))\r\n              );\r\n              if (variable_index.estado === \"activo\") {\r\n                arr_variables.push({\r\n                  nombre: variable_index.nombre,\r\n                  alias: variable_index.alias,\r\n                  tipo: \"V\",\r\n                  ...variables_datos[i][parseInt(variable_index.index)],\r\n                });\r\n              }\r\n            }\r\n            else {\r\n              const direccion_elemento = parseInt(direccion.substring(1));\r\n              const direccion_sensor = sensores[direccion_elemento].direccion;\r\n              const sensor_index = direccion_sensor.substring(\r\n                direccion_sensor.indexOf(\".\") + 2\r\n              );\r\n              const sensor_info = lista_sensores.find(\r\n                (sensor) => sensor.index === parseInt(sensor_index)\r\n              );\r\n              if (sensor_info.estado === \"activo\") {\r\n                arr_sensores.push({\r\n                  nombre: sensor_info.nombre,\r\n                  alias: sensor_info.alias,\r\n                  tipo: \"S\",\r\n                  ...sensores_datos[i][direccion_elemento],\r\n                });                \r\n              }\r\n            }\r\n          });\r\n          if (arr_variables.length > 0) {\r\n            arr_grafica.push(arr_variables);\r\n          }\r\n          if (arr_sensores.length > 0) {\r\n            arr_grafica.push(arr_sensores);\r\n          }\r\n        }\r\n        if (arr_grafica.length > 0) {\r\n          arr_graficas.push({ nombre: grafica.nombre, datos: arr_grafica });\r\n        }\r\n      });\r\n      setGraficasElementosInfo(arr_graficas);\r\n    }, 30000);\r\n  }\r\n\r\n  useEffect(()=>{\r\n    return ()=>{\r\n      if(intervalo.current!=null)\r\n        clearInterval(intervalo.current);\r\n    }\r\n  },[])\r\n  useEffect(async () => {\r\n    setCargando(true);\r\n    if(intervalo.current!=null){\r\n      clearInterval(intervalo.current);\r\n      intervalo.current = null;\r\n    }\r\n    await getData();    \r\n    intervalo.current = getIntervalo();     \r\n    setCargando(false);\r\n  }, [idElemento]);\r\n\r\n  if (cargando)\r\n    return (\r\n      <div style={{ display: \"grid\", placeItems: \"center\", height: \"40vh\" }}>\r\n        <Loader height=\"10vh\" />\r\n      </div>\r\n    );\r\n  return (\r\n    <div>\r\n      <CRow>\r\n        {graficasElementosInfo.map((grafica, idx) => {\r\n          return (\r\n            <CCol sm=\"12\" md=\"6\" key={idx}>\r\n              <CCard className=\"shadow\" >\r\n                <CCardHeader className=\"contenedor-cabecera\">\r\n                  <h6 className=\"m-2\">{grafica.nombre}</h6>\r\n                </CCardHeader>\r\n                <CCardBody>\r\n                  <ElementosBasica sensores={grafica.datos} />\r\n                </CCardBody>\r\n              </CCard>\r\n            </CCol>\r\n          );\r\n        })}\r\n      </CRow>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ElementosBasicas;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { CCard, CCardBody, CCardHeader, CRow, CCol } from \"@coreui/react\";\r\nimport {\r\n  getElementoById,\r\n  getPeligrosidadAPI,\r\n  getRecursosAPI,\r\n} from \"src/helpers/peticionesAPI\";\r\nimport ElementosPeligrosidad from \"./ElementosPeligrosidad\";\r\nimport \"./ElementosGraficas.css\";\r\nimport Loader from \"src/reusable/Loader\";\r\nimport store from \"src/store\";\r\n\r\nconst ElementosPeligrosidades = ({idElemento}) => {\r\n  \r\n  const {graficasDatos} = store.getState();\r\n  const [graficasElementosInfo, setGraficasElementosInfo] = useState([]);\r\n  const [cargando, setCargando] = useState(true);\r\n  const intervalo = useRef(null)\r\n\r\n  const token = localStorage.getItem(\"token\");\r\n  const id = idElemento;\r\n\r\n  const getData = async () => {\r\n    const { sensores, graficas } = await getElementoById(token, id);\r\n    let tarjeta = \"\";\r\n    if(sensores.length > 0)\r\n      tarjeta = sensores[0].direccion.substr(0,5); \r\n    const { sensores: lista_sensores } = await getRecursosAPI(tarjeta, token);\r\n      \r\n\r\n    let str_sensores = [];\r\n    sensores.forEach((sensor) => {\r\n      str_sensores.push(`${sensor.direccion}`);\r\n    });\r\n\r\n    let { sensores: sensores_datos } = await getPeligrosidadAPI(\r\n      str_sensores,\r\n      token,\r\n      graficasDatos.corto\r\n    );\r\n    sensores_datos = sensores_datos.reverse();\r\n\r\n    let arr_graficas = [];\r\n    graficas.forEach((grafica) => {\r\n      let arr_grafica = [];\r\n      for (let i = 0; i < sensores_datos.length; i++) {\r\n        let arr_sensores = [];\r\n        grafica.direcciones.forEach((direccion) => {\r\n          if (direccion[0] === \"S\") {\r\n            const direccion_elemento = parseInt(direccion.substring(1));\r\n            const direccion_sensor = sensores[direccion_elemento].direccion;\r\n            const sensor_index = direccion_sensor.substring(\r\n              direccion_sensor.indexOf(\".\") + 2\r\n            );\r\n\r\n            const sensor_info = lista_sensores.find(\r\n              (sensor) => sensor.index === parseInt(sensor_index)\r\n            );\r\n            if (sensor_info.estado === \"activo\") {\r\n              arr_sensores.push({\r\n                nombre: sensor_info.nombre,\r\n                alias: sensor_info.alias,\r\n                tipo: \"S\",\r\n                ...sensores_datos[i][direccion_elemento],\r\n              });\r\n            }\r\n          }\r\n        });\r\n        if (arr_sensores.length > 0) {\r\n          arr_grafica.push(arr_sensores);\r\n        }\r\n      }\r\n      if (arr_grafica.length > 0) {\r\n        arr_graficas.push({ nombre: grafica.nombre, datos: arr_grafica });\r\n      }\r\n    });\r\n    setGraficasElementosInfo(arr_graficas);\r\n  };\r\n  const getIntervalo = () => {\r\n    return setInterval(async () => {\r\n      const { sensores, graficas } = await getElementoById(token, id);\r\n      let tarjeta = \"\";\r\n      if(sensores.length > 0)\r\n        tarjeta = sensores[0].direccion.substr(0,5); \r\n      const { sensores: lista_sensores } = await getRecursosAPI(tarjeta, token);\r\n\r\n      let str_sensores = [];\r\n      sensores.forEach((sensor) => {\r\n        str_sensores.push(`${sensor.direccion}`);\r\n      });\r\n      let { sensores: sensores_datos } = await getPeligrosidadAPI(\r\n        str_sensores,\r\n        token,\r\n        1\r\n      );\r\n      sensores_datos = sensores_datos.reverse();\r\n\r\n      let arr_graficas = [];\r\n      graficas.forEach((grafica) => {\r\n        let arr_grafica = [];\r\n        for (let i = 0; i < sensores_datos.length; i++) {\r\n          let arr_sensores = [];\r\n          grafica.direcciones.forEach((direccion) => {\r\n            if (direccion[0] === \"S\") {\r\n              const direccion_elemento = parseInt(direccion.substring(1));\r\n              const direccion_sensor = sensores[direccion_elemento].direccion;\r\n              const sensor_index = direccion_sensor.slice(\r\n                direccion_sensor.indexOf(\".\") + 2,\r\n                direccion_sensor.length\r\n              );\r\n\r\n              const sensor_info = lista_sensores.find(\r\n                (sensor) => sensor.index === parseInt(sensor_index)\r\n              );\r\n              if (sensor_info.estado === \"activo\") {\r\n                arr_sensores.push({\r\n                  nombre: sensor_info.nombre,\r\n                  alias: sensor_info.alias,\r\n                  tipo: \"S\",\r\n                  ...sensores_datos[i][direccion_elemento],\r\n                });\r\n              }\r\n            }\r\n          });\r\n          if (arr_sensores.length > 0) \r\n            arr_grafica.push(arr_sensores);          \r\n        }\r\n        if (arr_grafica.length > 0) \r\n          arr_graficas.push({ nombre: grafica.nombre, datos: arr_grafica });\r\n        \r\n      });\r\n      setGraficasElementosInfo(arr_graficas);\r\n    }, 30000);\r\n  };\r\n\r\n  useEffect(()=>{\r\n    return ()=>{\r\n      if(intervalo.current!=null)\r\n        clearInterval(intervalo.current)\r\n    };\r\n  },[]);\r\n  useEffect(async () => {\r\n    setCargando(true);\r\n    if(intervalo.current!=null){\r\n      clearInterval(intervalo.current)\r\n      intervalo.current = null;\r\n    }\r\n    await getData();\r\n    intervalo.current = getIntervalo();\r\n    setCargando(false);\r\n  }, [idElemento]);\r\n\r\n  if (cargando)\r\n    return (\r\n      <div style={{ display: \"grid\", placeItems: \"center\", height: \"40vh\" }}>\r\n        <Loader height=\"10vh\" />\r\n      </div>\r\n    );\r\n  return (\r\n    <CRow>\r\n      {graficasElementosInfo.map((grafica, idx) => {\r\n        return (\r\n          <CCol sm=\"12\" md=\"6\" key={idx}>\r\n            <CCard className=\"shadow\">\r\n              <CCardHeader className=\"contenedor-cabecera\">\r\n                <h6 className=\"m-2\">{grafica.nombre}</h6>\r\n              </CCardHeader>\r\n              <CCardBody>\r\n                <ElementosPeligrosidad sensores={grafica.datos} />\r\n              </CCardBody>\r\n            </CCard>\r\n          </CCol>\r\n        );\r\n      })}\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default ElementosPeligrosidades;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  CContainer,\r\n  CRow,\r\n  CCol,\r\n  CCard,\r\n  CCardHeader,\r\n  CCardBody,\r\n  CTabs,\r\n  CNav,\r\n  CNavItem,\r\n  CNavLink,\r\n  CTabContent,\r\n  CTabPane,\r\n  CListGroup,\r\n  CListGroupItem,\r\n} from \"@coreui/react\";\r\n\r\nimport ElementosCustom from \"./ElementosCustom\";\r\nimport ElementosLanmarks from \"./ElementosLandmarks\";\r\nimport ElementosBasicas from \"./ElementosBasicas\";\r\nimport ElementosPeligrosidades from \"./ElementosPeligrosidades\";\r\nimport { getElementoById } from \"src/helpers/peticionesAPI\";\r\nimport Loader from \"src/reusable/Loader\";\r\nimport Navegacion,{NavegacionTipo} from \"../../general/Navegacion\";\r\nimport \"./ElementosGraficas.css\";\r\nimport iconoactivo from \"../../../assets/icons/activo.svg\";\r\nimport iconoinactivo from \"../../../assets/icons/inactivo.svg\";\r\n\r\nconst ElementosLayout = ({\r\n  match: {\r\n    params: { idElemento },\r\n  },\r\n  history\r\n}) => {\r\n  const [informacion, setInformacion] = useState({\r\n    nombre: \"\",\r\n    identificador: \"\",\r\n    descripcion: \"\",\r\n    area: \"\",\r\n    linea: \"\",\r\n    tipo: \"\",\r\n    proceso: \"\",\r\n    estado: \"inactivo\",\r\n    icono: iconoinactivo,\r\n  });\r\n  const [cargando, setCargando] = useState(true);\r\n  const intervalo = useRef(null);\r\n\r\n  const token = localStorage.getItem(\"token\");\r\n  const id = idElemento;\r\n\r\n  const GetData = async () => {\r\n    const {\r\n      nombre,\r\n      identificador,\r\n      descripcion,\r\n      area,\r\n      linea,\r\n      proceso,\r\n      tipo,\r\n      estado,\r\n    } = await getElementoById(token, id);\r\n    const icono = estado == \"activo\" ? iconoactivo : iconoinactivo;\r\n    const estadoformato = estado[0].toUpperCase() + estado.substring(1);\r\n    setInformacion({\r\n      nombre,\r\n      identificador,\r\n      descripcion,\r\n      area,\r\n      linea,\r\n      tipo,\r\n      proceso,\r\n      icono,\r\n      estado: estadoformato,\r\n    });\r\n  };\r\n  const GetIntervalo = () => {\r\n    return setInterval(GetData, 30000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (intervalo.current != null) clearInterval(intervalo.current);\r\n    };\r\n  }, []);\r\n  useEffect(async () => {\r\n    setCargando(true);\r\n    if (intervalo.current != null) {\r\n      clearInterval(intervalo.current);\r\n      intervalo.current = null;\r\n    }\r\n    await GetData();\r\n    intervalo.current = GetIntervalo();\r\n    setCargando(false);\r\n  }, [idElemento]);\r\n\r\n  if (cargando)\r\n    return (\r\n      <div style={{ display: \"grid\", placeItems: \"center\", height: \"40vh\" }}>\r\n        <Loader height=\"10vh\" />\r\n      </div>\r\n    );\r\n  return (\r\n    <CContainer fluid>\r\n      <Navegacion activo={2} tipo={NavegacionTipo.ELEMENTO} history={history} direccion={id}/>\r\n      <CRow>\r\n        <CCol sm=\"12\">\r\n          <CCard className=\"shadow\">\r\n            <CCardBody>\r\n              <CRow className=\"justify-content-between\">\r\n                <CCol className=\"col-3 d-flex align-items-center\">\r\n                  <img src={informacion.icono} className=\"icono\" />\r\n                  <h4 className=\"ml-2\">{informacion.estado}</h4>\r\n                </CCol>\r\n                <CCol className=\"col-9 text-right\">\r\n                  <h5>Elemento</h5>\r\n                  <h3>{`${informacion.nombre}`}</h3>\r\n                </CCol>\r\n              </CRow>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n      <CRow>\r\n        <CCol>\r\n          <CCard className=\"shadow\">\r\n            <CCardHeader className=\"contenedor-cabecera-principal\">\r\n              General\r\n            </CCardHeader>\r\n            <CCardBody>\r\n              <CListGroup accent>\r\n                <CRow>\r\n                  <CCol sm=\"4\">\r\n                    <CListGroupItem accent=\"info\">\r\n                      Identificador :\r\n                    </CListGroupItem>\r\n                  </CCol>\r\n                  <CCol sm=\"4\" className=\"align-self-center\">\r\n                    {informacion.identificador}\r\n                  </CCol>\r\n                </CRow>\r\n                <CRow>\r\n                  <CCol sm=\"4\">\r\n                    <CListGroupItem accent=\"info\">Descripción :</CListGroupItem>\r\n                  </CCol>\r\n                  <CCol sm=\"4\" className=\"align-self-center\">\r\n                    {informacion.descripcion}\r\n                  </CCol>\r\n                </CRow>\r\n                <CRow>\r\n                  <CCol sm=\"4\">\r\n                    <CListGroupItem accent=\"info\">Area :</CListGroupItem>\r\n                  </CCol>\r\n                  <CCol sm=\"4\" className=\"align-self-center\">\r\n                    {informacion.area}\r\n                  </CCol>\r\n                </CRow>\r\n                <CRow>\r\n                  <CCol sm=\"4\">\r\n                    <CListGroupItem accent=\"info\">Linea :</CListGroupItem>\r\n                  </CCol>\r\n                  <CCol sm=\"4\" className=\"align-self-center\">\r\n                    {informacion.linea}\r\n                  </CCol>\r\n                </CRow>\r\n                <CRow>\r\n                  <CCol sm=\"4\">\r\n                    <CListGroupItem accent=\"info\">Proceso :</CListGroupItem>\r\n                  </CCol>\r\n                  <CCol sm=\"4\" className=\"align-self-center\">\r\n                    {informacion.proceso}\r\n                  </CCol>\r\n                </CRow>\r\n                <CRow>\r\n                  <CCol sm=\"4\">\r\n                    <CListGroupItem accent=\"info\">Tipo :</CListGroupItem>\r\n                  </CCol>\r\n                  <CCol sm=\"4\" className=\"align-self-center\">\r\n                    {informacion.tipo}\r\n                  </CCol>\r\n                </CRow>\r\n              </CListGroup>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n      <CRow>\r\n        <CCol sm=\"12\">\r\n          <CCard className=\"shadow\">\r\n            <CCardHeader className=\"contenedor-cabecera-principal\">\r\n              <i className=\"far fa-chart-bar\"></i> <span> Graficas </span>\r\n            </CCardHeader>\r\n            <CCardBody>\r\n              <CTabs activeTab=\"custom\">\r\n                <CNav variant=\"tabs\">\r\n                  <CNavItem>\r\n                    <CNavLink data-tab=\"custom\">Custom</CNavLink>\r\n                  </CNavItem>\r\n                  <CNavItem>\r\n                    <CNavLink data-tab=\"basica\">Basica</CNavLink>\r\n                  </CNavItem>\r\n                  <CNavItem>\r\n                    <CNavLink data-tab=\"nivel\">Nivel</CNavLink>\r\n                  </CNavItem>\r\n                  <CNavItem>\r\n                    <CNavLink data-tab=\"tendencia\">Tendencia</CNavLink>\r\n                  </CNavItem>\r\n                </CNav>\r\n                <CTabContent>\r\n                  <CTabPane data-tab=\"custom\">\r\n                    {\" \"}\r\n                    <div className=\"mt-4\">\r\n                      <ElementosCustom idElemento={idElemento} />\r\n                    </div>{\" \"}\r\n                  </CTabPane>\r\n                  <CTabPane data-tab=\"basica\">\r\n                    {\" \"}\r\n                    <div className=\"mt-4\">\r\n                      <ElementosBasicas idElemento={idElemento} />{\" \"}\r\n                    </div>\r\n                  </CTabPane>\r\n                  <CTabPane data-tab=\"nivel\">\r\n                    {\" \"}\r\n                    <div className=\"mt-4\">\r\n                      <ElementosLanmarks idElemento={idElemento} />{\" \"}\r\n                    </div>\r\n                  </CTabPane>\r\n                  <CTabPane data-tab=\"tendencia\">\r\n                    {\" \"}\r\n                    <div className=\"mt-4\">\r\n                      <ElementosPeligrosidades idElemento={idElemento} />\r\n                    </div>{\" \"}\r\n                  </CTabPane>\r\n                </CTabContent>\r\n              </CTabs>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n    </CContainer>\r\n  );\r\n};\r\n\r\nexport default ElementosLayout;\r\n"],"sourceRoot":""}