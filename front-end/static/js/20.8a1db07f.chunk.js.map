{"version":3,"sources":["assets/icons/inactivo.svg","vistas/tarjetas/panel/Panel.js"],"names":["Panel","history","servicios","useContext","ServicesContext","useState","cargando","setCargando","tarjetas","setTarjetas","details","setDetails","token","localStorage","getItem","getTarjetas","a","Promise","callback","getUserAPI","promesas","map","tarjeta","getTarjeta","all","resultado","lista_tarjetas","nombre","estado","n_graficas","graficas","length","n_sensores","sensores","id","_id","click","direccion","push","useEffect","intervalo","setInterval","clearInterval","style","display","placeItems","height","fluid","sm","className","items","fields","key","_style","width","label","sorter","filter","columnFilter","itemsPerPage","responsive","pagination","scopedSlots","item","onClick","icono","iconoactivo","iconoinactivo","src","show_details","index","size","position","indexOf","newDetails","slice","splice","toggleDetails","includes","show","md","find","element"],"mappings":"yGAAe,QAA0B,sC,mLC6M1BA,UA1LD,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAETC,EAAYC,qBAAWC,KAC7B,EAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAEA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEMC,EAAQC,aAAaC,QAAQ,SA2B7BC,EAAW,uCAAG,sBAAAC,EAAA,+EACX,IAAIC,QAAJ,uCAAY,WAAOC,GAAP,uBAAAF,EAAA,sEACUG,YAAWP,GADrB,uBACTJ,EADS,EACTA,SACFY,EAAWZ,EAASa,KAAK,SAACC,GAC9B,OAAOC,YAAWD,EAASV,MAHZ,SAKOK,QAAQO,IAAIJ,GALnB,OAKXK,EALW,OAMXC,EAAiBD,EAAUJ,KAAI,SAACC,GAClC,MAAO,CACLK,OAAQL,EAAQK,OAChBC,OAAQN,EAAQM,OAChBC,WAAYP,EAAQQ,SAASC,OAC7BC,WAAYV,EAAQW,SAASF,OAC7BG,GAAIZ,EAAQa,QAGlB1B,EAAYiB,GACZR,GAAS,GAhBQ,4CAAZ,wDADW,2CAAH,qDAwBXkB,EAAQ,SAACT,EAAQU,GACrBpC,EAAQqC,KAAR,oBAA0BX,EAA1B,YAAoCU,KAWtC,OARAE,oBAAS,sBAAC,4BAAAvB,EAAA,6DACRT,GAAY,GADJ,SAEFQ,IAFE,cAGFyB,EAVCC,YAAY1B,EAAa,KAWhCR,GAAY,GAJJ,mBAKD,kBAAMmC,cAAcF,MALnB,2CAMP,IAEClC,EAEA,qBAAKqC,MAAO,CAAEC,QAAS,OAAQC,WAAY,SAAUC,OAAQ,QAA7D,SACE,cAAC,IAAD,CAAQA,OAAO,WAInB,cAAC,IAAD,CAAYC,OAAK,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAMC,GAAG,KAAT,SACE,eAAC,IAAD,CAAOC,UAAU,SAAjB,UACE,cAAC,IAAD,CAAaA,UAAU,sBAAvB,SACE,oBAAIA,UAAU,MAAd,wBAEF,cAAC,IAAD,UACE,cAAC,IAAD,CACEC,MAAO1C,EACP2C,OAnEC,CACb,CAAEC,IAAK,SAAUC,OAAQ,CAAEC,MAAO,QAClC,CAAEF,IAAK,aAAcC,OAAQ,CAAEC,MAAO,QACtC,CAAEF,IAAK,aAAcC,OAAQ,CAAEC,MAAO,QACtC,CAAEF,IAAK,SAAUC,OAAQ,CAAEC,MAAO,QAClC,CACEF,IAAK,eACLG,MAAO,GACPF,OAAQ,CAAEC,MAAO,MACjBE,QAAQ,EACRC,QAAQ,IA0DEC,cAAY,EACZC,aAAc,EACdH,QAAM,EACNI,YAAU,EACVC,YAAU,EACVC,YAAa,CACXnC,OAAQ,SAACoC,GACP,OACE,qBAAKd,UAAU,wBAAwBe,QAAS,kBAAM5B,EAAM2B,EAAKpC,OAAQ,gBAAzE,SAA0FoC,EAAKpC,UAGnGC,OAAQ,SAACmC,GACP,IAAME,EACW,UAAfF,EAAKnC,OAAqBsC,IAAcC,IAC1C,OACE,6BACE,qBAAKC,IAAKH,EAAOhB,UAAU,aAIjCoB,aAAc,SAACN,EAAMO,GACnB,OACE,oBAAIrB,UAAU,OAAd,SACE,cAAC,IAAD,CACEA,UAAU,iBACVsB,KAAK,KACLP,QAAS,YAzGX,SAACM,GACrB,IAAME,EAAW9D,EAAQ+D,QAAQH,GAC7BI,EAAahE,EAAQiE,SACP,IAAdH,EACFE,EAAWE,OAAOJ,EAAU,GAE5BE,EAAU,sBAAOhE,GAAP,CAAgB4D,IAE5B3D,EAAW+D,GAkGaG,CAAcP,IAJlB,SAOG5D,EAAQoE,SAASR,GACd,UACA,uBAKZ5D,QAAS,SAACqD,EAAMO,GACd,OACE,cAAC,IAAD,CAAWS,KAAMrE,EAAQoE,SAASR,GAAlC,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAMU,GAAG,IAAI/B,UAAU,OAAvB,SACE,cAAC,IAAD,CACEA,UAAU,iBACVe,QAAS,kBAAM5B,EAAM2B,EAAKpC,OAAQ,gBAFpC,8BAODzB,EAAU+E,MAAK,SAACC,GAAD,MAAyB,OAAZA,KAC3B,cAAC,IAAD,CAAMF,GAAG,IAAI/B,UAAU,OAAvB,SACE,cAAC,IAAD,CACEA,UAAU,iBACVe,QAAS,kBACP5B,EAAM2B,EAAKpC,OAAQ,kBAHvB,gCASA,KACHzB,EAAU+E,MAAK,SAACC,GAAD,MAAyB,QAAZA,KAC3B,cAAC,IAAD,CAAMF,GAAG,IAAI/B,UAAU,OAAvB,SACE,cAAC,IAAD,CACEA,UAAU,iBACVe,QAAS,kBAAM5B,EAAM2B,EAAKpC,OAAQ,aAFpC,wBAOA,KACHzB,EAAU+E,MAAK,SAACC,GAAD,MAAyB,OAAZA,KAC3B,cAAC,IAAD,CAAMF,GAAG,IAAI/B,UAAU,OAAvB,SACE,cAAC,IAAD,CACEA,UAAU,iBACVe,QAAS,kBAAM5B,EAAM2B,EAAKpC,OAAQ,gBAFpC,4BAOA","file":"static/js/20.8a1db07f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/inactivo.c25580cd.svg\";","import {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CCollapse,\r\n  CContainer,\r\n  CDataTable,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { ServicesContext } from \"src/containers/UserContext\";\r\nimport { getTarjeta, getUserAPI } from \"src/helpers/peticionesAPI\";\r\nimport Loader from \"src/reusable/Loader\";\r\nimport iconoactivo from \"../../../assets/icons/activo.svg\";\r\nimport iconoinactivo from \"../../../assets/icons/inactivo.svg\";\r\nimport \"./Panel.css\";\r\n\r\nconst Panel = ({ history }) => {\r\n\r\n  const servicios = useContext(ServicesContext);\r\n  const [cargando, setCargando] = useState(true);\r\n\r\n  const [tarjetas, setTarjetas] = useState([]);\r\n  const [details, setDetails] = useState([]);\r\n\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  const toggleDetails = (index) => {\r\n    const position = details.indexOf(index);\r\n    let newDetails = details.slice();\r\n    if (position !== -1) {\r\n      newDetails.splice(position, 1);\r\n    } else {\r\n      newDetails = [...details, index];\r\n    }\r\n    setDetails(newDetails);\r\n  };\r\n\r\n  const fields = [\r\n    { key: \"nombre\", _style: { width: \"60%\" } },\r\n    { key: \"n_graficas\", _style: { width: \"15%\" } },\r\n    { key: \"n_sensores\", _style: { width: \"15%\" } },\r\n    { key: \"estado\", _style: { width: \"10%\" } },\r\n    {\r\n      key: \"show_details\",\r\n      label: \"\",\r\n      _style: { width: \"1%\" },\r\n      sorter: false,\r\n      filter: false,\r\n    },\r\n  ];\r\n\r\n  const getTarjetas = async () => {\r\n    return new Promise(async (callback)=>{\r\n      const { tarjetas } = await getUserAPI(token);\r\n      const promesas = tarjetas.map( (tarjeta) => {\r\n        return getTarjeta(tarjeta, token);        \r\n      });\r\n      const resultado = await Promise.all(promesas);\r\n      const lista_tarjetas = resultado.map((tarjeta) => {\r\n          return {\r\n            nombre: tarjeta.nombre,\r\n            estado: tarjeta.estado,\r\n            n_graficas: tarjeta.graficas.length,\r\n            n_sensores: tarjeta.sensores.length,\r\n            id: tarjeta._id,\r\n          }\r\n      });      \r\n      setTarjetas(lista_tarjetas);\r\n      callback(true);\r\n    });\r\n  };\r\n  const getIntervalo = () => {\r\n    return setInterval(getTarjetas, 30000);\r\n  };\r\n\r\n  const click = (nombre, direccion) => {\r\n    history.push(`/tarjetas/${nombre}/${direccion}`);\r\n  };\r\n\r\n  useEffect(async () => {\r\n    setCargando(true);\r\n    await getTarjetas();\r\n    const intervalo = getIntervalo();\r\n    setCargando(false);\r\n    return () => clearInterval(intervalo);\r\n  }, []);\r\n\r\n  if (cargando)\r\n    return (\r\n      <div style={{ display: \"grid\", placeItems: \"center\", height: \"40vh\" }}>\r\n        <Loader height=\"10vh\" />\r\n      </div>\r\n    );\r\n  return (\r\n    <CContainer fluid>\r\n      <CRow>\r\n        <CCol sm=\"12\">\r\n          <CCard className=\"shadow\">\r\n            <CCardHeader className=\"contenedor-cabecera\">\r\n              <h4 className=\"m-0\">Tarjetas</h4>\r\n            </CCardHeader>\r\n            <CCardBody>\r\n              <CDataTable\r\n                items={tarjetas}\r\n                fields={fields}\r\n                columnFilter\r\n                itemsPerPage={5}\r\n                sorter\r\n                responsive\r\n                pagination\r\n                scopedSlots={{\r\n                  nombre: (item) => {\r\n                    return (\r\n                      <div className=\"ml-2 mt-2 pt-1 cursor\" onClick={() => click(item.nombre, \"informacion\")}>{item.nombre}</div>\r\n                    )\r\n                  },\r\n                  estado: (item) => {\r\n                    const icono =\r\n                      item.estado == \"activo\" ? iconoactivo : iconoinactivo;\r\n                    return (\r\n                      <td>\r\n                        <img src={icono} className=\"icono\" />\r\n                      </td>\r\n                    );\r\n                  },\r\n                  show_details: (item, index) => {\r\n                    return (\r\n                      <td className=\"py-2\">\r\n                        <CButton\r\n                          className=\"boton-elemento\"\r\n                          size=\"sm\"\r\n                          onClick={() => {\r\n                            toggleDetails(index);\r\n                          }}\r\n                        >\r\n                          {details.includes(index)\r\n                            ? \"Ocultar\"\r\n                            : \"Caracteristicas\"}\r\n                        </CButton>\r\n                      </td>\r\n                    );\r\n                  },\r\n                  details: (item, index) => {\r\n                    return (\r\n                      <CCollapse show={details.includes(index)}>\r\n                        <CCardBody>\r\n                          <CRow>\r\n                            <CCol md=\"3\" className=\"my-1\">\r\n                              <CButton\r\n                                className=\"boton-elemento\"\r\n                                onClick={() => click(item.nombre, \"informacion\")}\r\n                              >\r\n                                Información\r\n                              </CButton>\r\n                            </CCol>\r\n                            {servicios.find((element) => element === \"TC\") ? (\r\n                              <CCol md=\"3\" className=\"my-1\">\r\n                                <CButton\r\n                                  className=\"boton-elemento\"\r\n                                  onClick={() =>\r\n                                    click(item.nombre, \"configuracion\")\r\n                                  }\r\n                                >\r\n                                  Configuración\r\n                                </CButton>\r\n                              </CCol>\r\n                            ) : null}\r\n                            {servicios.find((element) => element === \"TGI\") ? (\r\n                              <CCol md=\"3\" className=\"my-1\">\r\n                                <CButton\r\n                                  className=\"boton-elemento\"\r\n                                  onClick={() => click(item.nombre, \"graficas\")}\r\n                                >\r\n                                  Graficas\r\n                                </CButton>\r\n                              </CCol>\r\n                            ) : null}\r\n                            {servicios.find((element) => element === \"TE\") ? (\r\n                              <CCol md=\"3\" className=\"my-1\">\r\n                                <CButton\r\n                                  className=\"boton-elemento\"\r\n                                  onClick={() => click(item.nombre, \"estadistica\")}\r\n                                >\r\n                                  Estadisticas\r\n                                </CButton>\r\n                              </CCol>\r\n                            ) : null}\r\n                          </CRow>\r\n                        </CCardBody>\r\n                      </CCollapse>\r\n                    );\r\n                  },\r\n                }}\r\n              ></CDataTable>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n    </CContainer>\r\n  );\r\n};\r\n\r\nexport default Panel;\r\n"],"sourceRoot":""}